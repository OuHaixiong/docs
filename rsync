rsync，remote synchronize顾名思意就知道它是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。 rsync是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，而且可以通过ssh方式来传输文件，这样其保密性也非常好，另外它还是免费的软件。
　　rsync 包括如下的一些特性：
　　能更新整个目录和树和文件系统；
　　有选择性的保持符号链链、硬链接、文件属于、权限、设备以及时间等；
　　对于安装来说，无任何特殊权限要求；
　　对于多个文件来说，内部流水线减少文件等待的延时；
　　能用rsh、ssh 或直接端口做为传输入端口；
　　支持匿名rsync 同步文件，是理想的镜像工具；
（同样功能的软件还有：inotify）
rsync的安装:(首要条件：如果没有安装libiconv，需要安装之；注意新建动态链接库文件：/etc/ld.so.conf.d加入内容/usr/local/lib)
1，下载并安装
可以到网站http://rsync.samba.org进行下载
也可以在线安装：
# sudo apt-get  install  rsync  注：在debian、ubuntu 等在线安装方法；
# yum install rsync    注：Fedora、Redhat 等在线安装方法；
# rpm -ivh rsync       注：Fedora、Redhat 等rpm包安装方法；
下面是源码包安装：
tar -xvf rsync-3.1.2pre1.tar.gz
cd rsync-3.1.2pre1
./configure --prefix=/usr/local/rsync
make && make install

2，配置配置文件
touch /etc/rsyncd.conf // 创建rsyncd.conf，这是rsync服务器的配置文件。加入如下内容：

pid file = /var/run/rsyncd.pid
port = 873
address = 192.168.253.4
uid = root
gid = root
use chroot = yes
read only = yes
hosts allow = 192.168.17.0/255.255.255.0 192.168.1.0/255.255.255.0
hosts deny = *
max connections = 5
motd file = /etc/rsyncd.motd
log file = /data/logs/rsync/rsync.log
log format = %t %a %m %f %b
syslog facility = local3
timeout = 300

[mvc]
path = /data/www/mvc
list = yes
ignore errors
auth users = root
secrets file = /etc/rsyncd.secrets
comment = PHP code mvc 
#exclude = easylife/ samba/ .svn/ .settings/ .buildpath .project

也可以直接用配置备份里的 rsyncd.conf 

3，创建密码文件和服务器信息文件
vim /etc/rsyncd.secrets 加入：
root:123
# 密码可以和系统密码不一样
easylife:keer
修改权限：chmod 0600 /etc/rsyncd.secrets // 出于安全考虑，文件的属性必须是只有属主可读写
vim /etc/rsyncd.motd 加入：
##########################++++
 Welcome to use rsync services
##########################++++

4，开启对应的端口
/sbin/iptables -I INPUT -p tcp --dport 873 -j ACCEPT
/etc/rc.d/init.d/iptables save
/etc/rc.d/init.d/iptables restart

5，启动rsync服务器端
/usr/local/rsync/bin/rsync --daemon --config=/etc/rsyncd.conf
// 以后端进程方式启动，使用/etc/rsyncd.conf配置文件，如果默认在/etc/下可以不写
在本机可以用：netstat -lntpu |grep 873 查看是否已经启动
在他机可以通过telnet测试是否开启了873端口：telnet 192.168.253.4 873

6，通过rsync客户端来同步数据
首先安装rsync，安装步骤和安装服务器版rsync一样
测试列出rsync服务器上所提供的同步内容：
rsync --list-only root@192.168.253.4::  返回如下：
##########################++++
 Welcome to use rsync services
##########################++++

mvc            	PHP code mvc
查看mvc模块下的文件：
rsync --list-only root@192.168.253.4::mvc
通过客户端发出rsync命令来实现各种同步操作，如：
rsync -avzP --delete root@192.168.253.4::mvc /data/www/mvc  // 只能同步一次，如需自动同步，需要做成定时任务
通过设定密码文件来同步：
cd /etc/
touch rsyncd.secrets
chmod 0600 rsyncd.secrets
echo "123" > rsyncd.secrets
rsync -avzP --delete --password-file=/etc/rsyncd.secrets root@192.168.253.4::mvc /data/www/mvc

下面制成定时任务：
crontab -e  输入如下内容：
* * * * * sleep 1;rsync -avzP --delete --password-file=/etc/rsyncd.secrets root@192.168.253.4::mvc /data/www/mvc
(M：分钟（0-59）
H：小时（0-23）
D：日期（1-31）
m：月份（1-12）
d：一个星期中的某天（0-6，0代表周日）)
重启crond服务器
killall crond 杀死crond 服务器的进程
ps aux |grep crond 查看一下是否被杀死
/usr/sbin/crond 启动 crond 服务器
(貌似还是需要等1分钟才能执行，定时任务只能在脚本中无限循环来实现)

下面用shell脚本写的定时更新任务：
vim /data/shell/sync_mvc.sh
#!/bin/bash
while true
do
    /usr/local/rsync/bin/rsync -avzP --delete --password-file=/etc/rsyncd.secrets root@192.168.253.4::mvc /data/www/mvc
    sleep 2
done
给脚本赋予执行权限：chmod 0700 /data/shell/sync_mvc.sh
在后台运行该脚本：
nohup /data/shell/sync_mvc.sh > /data/logs/shell/sync_mvc.log 2>&1 &
（如果没有日记文件或文件夹，需要手动创建下）
通过jobs查看进程是否存在
最后在 /data/www/mvc 文件夹下面进行增、删、改操作，看是否同步过去了。
加入开机执行里面去
vim /etc/rc.local 加入：
nohup /data/shell/sync_mvc.sh > /data/logs/shell/sync_mvc.log 2>&1 &
至此rsync配置完毕


rsync的命令格式可以为：
　　
　　1. rsync [OPTION]... SRC [SRC]... [USER@]HOST:DEST 
　　2. rsync [OPTION]... [USER@]HOST:SRC DEST 
　　3. rsync [OPTION]... SRC [SRC]... DEST 
　　4. rsync [OPTION]... [USER@]HOST::SRC [DEST] 
　　5. rsync [OPTION]... SRC [SRC]... [USER@]HOST::DEST 
　　6. rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]

　　rsync有六种不同的工作模式：

　　1. 拷贝本地文件；当SRC和DES路径信息都不包含有单个冒号":"分隔符时就启动这种工作模式。
　　2.使用一个远程shell程序（如rsh、ssh）来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号":"分隔符时启动该模式。
　　3.使用一个远程shell程序（如rsh、ssh）来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号":"分隔符时启动该模式。
　　4. 从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含"::"分隔符时启动该模式。
　　5. 从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含"::"分隔符时启动该模式。
　　6. 列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。
　　-a 以archive模式操作、复制目录、符号连接 相当于-rlptgoD

　　rsync中的参数

　　-r 是递归 
　　-l 是链接文件，意思是拷贝链接文件；-p 表示保持文件原有权限；-t 保持文件原有时间；-g 保持文件原有用户组；-o 保持文件原有属主；-D 相当于块设备文件；
　　-z 传输时压缩；
　　-P 传输进度；
　　-v 传输时的进度等信息，和-P有点关系，自己试试。可以看文档；
　　-e ssh的参数建立起加密的连接。
　　-u只进行更新，防止本地新文件被重写，注意两者机器的时钟的同时
　　--progress是指显示出详细的进度情况
　　--delete是指如果服务器端删除了这一文件，那么客户端也相应把文件删除，保持真正的一致
　　--password-file=/password/path/file来指定密码文件，这样就可以在脚本中使用而无需交互式地输入验证密码了，这里需要注意的是这份密码文件权限属性要设得只有属主可读。

rsync参数的具体解释如下： 
-v, --verbose 详细模式输出 
-q, --quiet 精简输出模式 
-c, --checksum 打开校验开关，强制对文件传输进行校验 
-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD 
-r, --recursive 对子目录以递归模式处理 
-R, --relative 使用相对路径信息 
-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。 
--backup-dir 将备份文件(如~filename)存放在在目录下。 
-suffix=SUFFIX 定义备份文件前缀 
-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件) 
-l, --links 保留软链结 
-L, --copy-links 想对待常规文件一样处理软链结 
--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结 
--safe-links 忽略指向SRC路径目录树以外的链结 
-H, --hard-links 保留硬链结 
-p, --perms 保持文件权限 
-o, --owner 保持文件属主信息 
-g, --group 保持文件属组信息 
-D, --devices 保持设备文件信息 
-t, --times 保持文件时间信息 
-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间 
-n, --dry-run现实哪些文件将被传输 
-W, --whole-file 拷贝文件，不进行增量检测 
-x, --one-file-system 不要跨越文件系统边界 
-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节 
-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步 
--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息 
-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件 
--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件 
--delete 删除那些DST中SRC没有的文件 
--delete-excluded 同样删除接收端那些被该选项指定排除的文件 
--delete-after 传输结束以后再删除 
--ignore-errors 及时出现IO错误也进行删除 
--max-delete=NUM 最多删除NUM个文件 
--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输 
--force 强制删除目录，即使不为空 
--numeric-ids 不将数字的用户和组ID匹配为用户名和组名 
--timeout=TIME IP超时时间，单位为秒 
-I, --ignore-times 不跳过那些有同样的时间和长度的文件 
--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间 
--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0 
-T --temp-dir=DIR 在DIR中创建临时文件 
--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份 
-P 等同于 --partial 
--progress 显示备份过程 
-z, --compress 对备份的文件在传输时进行压缩处理 
--exclude=PATTERN 指定排除不需要传输的文件模式 
--include=PATTERN 指定不排除而需要传输的文件模式 
--exclude-from=FILE 排除FILE中指定模式的文件 
--include-from=FILE 不排除FILE指定模式匹配的文件 
--version 打印版本信息 
--address 绑定到特定的地址 
--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件 
--port=PORT 指定其他的rsync服务端口 
--blocking-io 对远程shell使用阻塞IO 
-stats 给出某些文件的传输状态 
--progress 在传输时现实传输过程 
--log-format=formAT 指定日志文件格式 
--password-file=FILE 从FILE中得到密码 
--bwlimit=KBPS 限制I/O带宽，KBytes per second 
-h, --help 显示帮助信息



/usr/bin/rsync   -avzP  --password-file=/etc/rsyncd/rsyncrhel4easylife.secrets    easylife@192.168.145.5::rhel4opt   /home/rhel4hoptbak/$(date +'%m-%d-%y')
rhel4opt数据同步到 /home/rhel4optbak/目录下。并按年月日归档创建目录；每天备份都存档

Q：如何通过ssh进行rsync，而且无须输入密码？

　　A：可以通过以下几个步骤

　　1. 通过ssh-keygen在server A上建立SSH keys，不要指定密码，你会在~/.ssh下看到identity和identity.pub文件 
　　2. 在server B上的home目录建立子目录.ssh
　　3. 将A的identity.pub拷贝到server B上
　　4. 将identity.pub加到~[user b]/.ssh/authorized_keys
　　5. 于是server A上的A用户，可通过下面命令以用户B ssh到server B上了。e.g. ssh -l userB serverB。这样就使server A上的用户A就可以ssh以用户B的身份无需密码登陆到server B上了。
