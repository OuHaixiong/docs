Nginx是一个小巧而高效的Linux下的Web服务器软件，是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler 站点开发的，已经在一些俄罗斯的大型网站上运行多年，相当的稳定。 用Nginx搭建web服务器,比Apache相比,占用更少的资源,支持更多的并发连接，体现更高的效率。

编译环境:
yum -y install make pcre pcre-devel gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers libpng10-devel gd gd-devel vim-minimal unzip file libevent-devel
(貌似还有：patch gcc-g77 flex bison libtool libtool-libs kernel-devel libpng10 sendmail fonts-chinese gettext gettext-devel gmp-devel pspell-devel wget)

（
如果是 ubuntu：
sudo apt-get  install  build-essential 
sudo apt-get build-dep gcc // 安装gcc

首选,确认你已经安装了build-essential程序包:
apt-get install build-essential
确认你已经安装了内核头文件包:
uname -r
apt-get install linux-headers-'kernel version'
如果你遇到gcc版本错误,你需要安装编译你内核的gcc版本:
cat /proc/version
这会告诉你,你的内核是用什么版本的gcc编译的.
$ cat /proc/version 
Linux version 2.6.12-8-386 (buildd@rothera) (gcc version 3.4.5 20050809 (prerelease) (Debian 3.4.4-6ubuntu6)) #1 Tue Aug 30 22:41:30 BST 2005
ls /usr/bin/gcc*

/usr/bin/gcc      /usr/bin/gcc-4.0  /usr/bin/gccbug   /usr/bin/gccbug-4.0
可以看到,我的核心是用gcc-3.4编译的,但我只装了gcc-4.0.如果你的也不同于/usr/bin/gcc*,你需要安装核心所用的版本.
apt-get install gcc-3.4
这是我需要的版本,你的可能不同.
人 们忘记的,并困扰我的是g++版本.一些人好像安装gcc之后就可以正常安装vmware-config.pl.但我的在编译vmmon模块时遇到 "cannot exec 'cc1plus'"错误并停止了.你需要安装的是和gcc一样版本的gcc-c++,只是Debian/Ubuntu把它叫做g++.
apt-get install g++-3.4
编辑添加: 我忘记你要设定CC为需要的gcc版本了:
export CC=/usr/bin/gcc-3.4
./runme.pl

sudo apt-get install openssl
sudo apt-get install libxml2 libxml2-dev
sudo apt-get install libjpeg62 libjpeg62-dev
sudo apt-get install libpng12 libpng12-dev
sudo apt-get update
sudo apt-get install nginx

    所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下
    主配置在 /etc/nginx/nginx.conf
    程序文件在/usr/sbin/nginx
    日志放在了/var/log/nginx中
    并已经在/etc/init.d/下创建了启动脚本nginx
    虚拟主机的目录设置请参考/etc/nginx/sites-available里的配置

sudo /etc/init.d/nginx start  启动nginx，在浏览器中输入：http://localhost/  
sudo /etc/init.d/nginx stop   停止nginx
）

nginx的安装
添加用户,用户组
groupadd www
useradd -g www -s /bin/falsh -M www
安装Nginx 
#tar -zxvf nginx-1.2.0.tar.gz && cd nginx-1.2.0 && ./configure --user=www --group=www （指定nginx的用户和群组） --prefix=/usr/local/webserver/nginx(安装目录)  --sbin-path=/usr/local/webserver/nginx/sbin/nginx  --conf-path=/usr/local/webserver/nginx/conf/nginx.conf  --with-http_stub_status_module  --with-http_ssl_module（开启ssl模块） --with-pcre  --lock-path=/var/run/nginx.lock --pid-path=/var/run/nginx.pid 
编译结束后如果没出错的话，make && make install 安装。 
第三步：更改配置
#更改配置 
vi /usr/local/webserver/nginx/conf/nginx.conf #修改一些参数,别直接替换文件,这只是一部分 
user www; (修改；指定nginx的运行用户)
worker_processes  1; （指定线程，默认情况下nginx是单线程运行）
#pid        logs/nginx.pid; （inx主进程id）

events { 
    use epoll;  （inx的高效模式） 
	worker_connections 1024;  （文件最大的连接数）
} (修改)

http {
    include       mime.types; （配置文件模块）
    default_type  application/octet-stream; （核心配置文件模块）

    sendfile        on;  （开启高效传输模式）
    tcp_nopush     on; （防止网络端口阻塞）
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on; （开启压缩模块，需要注意的是在配置文件中开启之后是不生效的，还需要加载gzip模块）
	
    server {
        listen       80; (监听80端口)
        server_name  localhost; （域名或代理服务器的域名）

        location / {
		    root /home/bear/www; （网站根目录，可以为相对路径也可以为绝对路径）
		    index index.php index.html index.htm ;  （首页文件类型）
	    }

        #error_page  404              /404.html; （404错误提示页面）
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html; （500等错误提示页面）
        location = /50x.html {
            root   html;
        }

		location ~ .*\.(php|php5)?${
            root          /home/bear/www;
			fastcgi_pass  127.0.0.1:9000; 
			fastcgi_index index.php; 
			fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
			include       fastcgi_params; 
        }
	}

	include /etc/nginx/sites-enabled/*.conf;
	
}


#检测配置文件 /usr/local/webserver/nginx/sbin/nginx -t 
#提示表示成功 
#nginx: the configuration file /usr/local/webserver/nginx/conf/nginx.conf syntax isok 
#nginx: configuration file /usr/local/webserver/nginx/conf/nginx.conf test issuccessful

安装结束后启动nginx,/usr/local/webserver/nginx/sbin/nginx, 
平滑重启： kill -HUP 住进称号或进程号文件路径

然后用netstat -tunpl | grep:80查看端口是否启动。 
在浏览器里输入192.168.127.6(当前实验主机)，看到welcome to nginx!则表示nginx安装成功。 

安装libiconv和libevent
tar -zxvf libevent-2.0.21-stable.tar.gz , tar -zxf libiconv-1.14.tar.gz
分别解压,配置安装
./configure && make && make install

（ubuntu下如果出如下错误：
In file included from progname.c:26:0:
./stdio.h:1010:1: error: ‘gets’ undeclared here (not in a function)
_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
^
cd ./srclib
sudo vim stdio.h 找到如下句，直接注释掉
// _GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
）

安装libmcrypt、mhash、mcrypt
yum list installed|grep mcrypt 查看是否有安装mcrypt库
tar -zxvf libmcrypt-2.5.8.tar.gz
cd libmcrypt-2.5.8/
./configure && make && make install libmcript默认安装在/usr/local 
tar zxvf mhash-0.9.9.9.tar.gz
cd mhash-0.9.9.9/
./configure && make && make install
tar -zxvf mcrypt-2.6.8.tar.gz
cd mcrypt-2.6.8/
LD_LIBRARY_PATH=/usr/local/lib ./configure （特别注意这里）
make && make install

接下来安装mysql,这跟搭建lamp环境时完全一样，下面就不加以说明。
rpm -qa |grep -i mysql 查看系统安装的mysql
或通过如下命令查看系统是否已安装mysql
yum list installed | grep mysql
先看下系统是否有存在的包：mysql-libs-5.1.73-3.el6_5.x86_64
如果有需要先移除掉：yum -y remove mysql-libs-5.1.73-3.el6_5.x86_64
yum -y remove mysql-libs.x86_64
yum -y remove mysql.x86_64 （运行这个就行了，依赖的devel和server也会被卸载掉）
yum -y remove mysql-server.x86_64

下载mysql的rpm包：MySQL-5.6.19-1.el6.x86_64.rpm-bundle.tar
解压： tar -zxvf MySQL-5.6.19-1.el6.x86_64.rpm-bundle.tar
然后依次安装：
rpm -ivh MySQL-devel-5.6.19-1.el6.x86_64.rpm 
rpm -ivh MySQL-server-5.6.19-1.el6.x86_64.rpm 
rpm -ivh MySQL-client-5.6.19-1.el6.x86_64.rpm
安装后生成的一个随机密码在 /root/.mysql_secret 
查看mysql数据库版本信息：
rpm -qi mysql-server

启动 MySQL：service mysql start 或（/etc/init.d/mysql start/stop/restart）启动脚本：/etc/rc.d/init.d/
停止：/usr/bin/mysqladmin -u root -p shutdown
登陆mysql ：mysql -u root -p
修改密码：set PASSWORD=password('123456');(或 /usr/bin/mysqladmin -u root [-p 旧密码] password '123456')
#可运行此脚本 进行生产服务器安全配置
/usr/bin/mysql_secure_installation
#Enter current password for root  输入root密码
#Change the root password?  是否修改root的密码
#Remove anonymous users?  是否删除匿名账号
#Disallow root login remotely?  是否取消root用户远程登录
#Remove test database and access to it?  是否删除test库和对test库的访问权限
#Reload privilege tables now?  是否现在刷新授权表使修改生效
使用命令ps -ef | grep mysql 查看mysql进程
whereis mysql 查看文件安装路径：
mysql: /usr/bin/mysql /usr/lib64/mysql /usr/include/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz
which mysql 查询运行文件所在路径（目录）
数据文件：/var/lib/mysql
安装目录：/usr/share/mysql(mysql.server启动脚本)
工具（client）：/usr/bin/
服务程序：/usr/sbin/mysqld
默认没有my.cnf配置文件，可拷贝：cp /usr/share/mysql/my-default.cnf /etc/my.cnf
卸载 rpm -ev MySQL-client-5.6.19-1.el6.x86_64 MySQL-server-5.6.19-1.el6.x86_64

下面是源码安装mysql开始：（未验证）
wget -c http://soft.vpser.net/datebase/mysql/mysql-5.1.44.tar.gz
wget -c http://soft.vpser.net/web/pdo/PDO_MYSQL-1.0.2.tgz
tar -zxvf mysql-5.1.44.tar.gz
cd mysql-5.1.44/
./configure --prefix=/usr/local/mysql --with-extra-charsets=all --enable-thread-safe-client --enable-assembler --with-charset=utf8 --enable-thread-safe-client --with-extra-charsets=all --with-big-tables --with-readline --with-ssl --with-embedded-server --enable-local-infile
make && make install
cd ../

groupadd mysql
useradd -g mysql mysql
cp /usr/local/mysql/share/mysql/my-medium.cnf /etc/my.cnf
/usr/local/mysql/bin/mysql_install_db --user=mysql
chown -R mysql /usr/local/mysql/var
chgrp -R mysql /usr/local/mysql/.
cp /usr/local/mysql/share/mysql/mysql.server /etc/init.d/mysql
chmod 755 /etc/init.d/mysql
chkconfig --level 345 mysql on
echo "/usr/local/mysql/lib/mysql" >> /etc/ld.so.conf
echo "/usr/local/lib" >>/etc/ld.so.conf

ldconfig
ln -s /usr/local/mysql/lib/mysql /usr/lib/mysql
ln -s /usr/local/mysql/include/mysql /usr/include/mysql
/etc/init.d/mysql start

/usr/local/mysql/bin/mysqladmin -u root password $mysqlrootpwd

/etc/init.d/mysql restart
/etc/init.d/mysql stop
chkconfig mysql-ndb off
chkconfig mysql-ndb-mgm off
上面是源码安装mysql结束。

下面是安装apache开始：（未验证）
wget http://soft.vpser.net/web/apache/httpd-2.2.11.tar.gz
tar zxvf httpd-2.2.11.tar.gz
cd httpd-2.2.11
./configure --prefix=/usr/local/apache --enable-deflate=shared --enable-headers=shared --enable-info=shared --enable-rewrite=shared --enable-so
make
make install
cd ../
上面是安装apache结束。

安装PHP:
tar -jxvf php-5.4.35.tar.bz2
cd php-5.4.35/
编译,安装
./configure --prefix=/usr/local/php  --with-mysql --with-mysqli --with-openssl --enable-fpm --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-bz2 --with-libxml-dir=/usr --enable-xml --with-iconv-dir=/usr/local --with-curl --with-mcrypt --with-gd --enable-gd-native-ttf --with-mhash --enable-pcntl --enable-sockets  --enable-zip --enable-soap
make ZEND_EXTRA_LIBS='-liconv'
make test
make install
安装目录：/usr/local/php
拷贝配置文件（/usr/local/php/lib/php.ini ）：
cp /home/bear/share/php-5.5.14/php.ini-development /usr/local/php/lib/php.ini
修改php.ini配置
date.timezone = PRC
short_open_tag = Off
post_max_size = 200M
upload_max_filesize = 150M
session.gc_maxlifetime = 86400
error_reporting = E_ALL
display_errors = On

路径：
/usr/local/php/bin/php        php所在的目录
/usr/local/php/bin/phpize     phpize所在目录
/usr/local/php/lib/php.ini    php配置文件
/usr/local/php/bin/php-config php安装配置
/usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/ php扩展文件所在目录

安装mysqli扩展
cd /home/bear/share/php-5.5.14/ext/mysqli
/usr/local/php/bin/phpize
./configure --prefix=/usr/local/mysqli --with-php-config=/usr/local/php/bin/php-config --with-mysqli
make && make install 安装完成后提示：
Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/
Installing header files:          /usr/local/php/include/php/
添加配置：
vim /usr/local/php/lib/php.ini
extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/mysqli.so
（修改了配置都需要重起php-fpm和nginx）
安装pdo_mysql扩展
cd /home/bear/share/php-5.5.14/ext/pdo_mysql
/usr/local/php/bin/phpize
./configure --prefix=/usr/local/pdo_mysql --with-php-config=/usr/local/php/bin/php-config --with-pdo_mysql
make && make install 安装完成后提示：
Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/
Installing header files:          /usr/local/php/include/php/
添加配置：
vim /usr/local/php/lib/php.ini
extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/pdo_mysql.so
（修改了配置都需要重起php-fpm和nginx）
安装memcache
tar -zxf memcache-2.2.6.tgz 
cd memcache-2.2.6
/usr/local/php/bin/phpize 
./configure --prefix=/usr/local/memcache --with-php-config=/usr/local/php/bin/php-config
make && make install
vim /usr/local/php/lib/php.ini
extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/memcache.so

注意：nginx 需要执行的文件需要644权限
nginx的根目录和其父级目录需要755权限
 root   /home/bear/www; 网站的根目录

设置nginx支持php
mv /usr/loca/php/etc/php-fpm.conf.default /usr/loca/php/etc/php-fpm.conf
(PHP-FPM的默认配置文件为/usr/local/php/etc/php-fpm.conf)
修改 php-fpm.conf
pm.max_children = 50
pm.start_servers = 20
pm.min_spare_servers = 5
pm.max_spare_servers = 35
pm.max_requests = 500
执行 /usr/local/php/sbin/php-fpm

如果修改了php.ini需要重启php-fpm:
 ps -ef |grep php-fpm  找到php-fpm的主（master）进程
 kill -QUIT 3864 如果子进程还没有结束就：pkill php-fpm
 ps -ef |grep nginx
 kill -QUIT 3841
 /usr/local/php/sbin/php-fpm
 /usr/local/webserver/nginx/sbin/nginx
 还有平滑重启 kill -HUP 住进称号或进程号文件路径 (PHP不能平滑重启的)
 平滑退出 kill -QUIT 主进程号
 强制停止 pkill -9 nginx/php-fpm 
 
测试,编写 phpinfo 测试
vim /home/bear/www/phpinfo.php
<?php
phpinfo();

加入开机启动服务：
 vim /etc/rc.local 在最后加入下面两行
 /usr/local/php/sbin/php-fpm
 /usr/local/webserver/nginx/sbin/nginx

下面是扩展安装 （未验证）
# 安装zend
wget http://soft.vpser.net/web/zend/ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
tar zxvf ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
mkdir -p /usr/local/zend/
cp ZendOptimizer-3.3.9-linux-glibc23-i386/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend/

cat >>/usr/local/php/etc/php.ini<<EOF
[Zend Optimizer]
zend_optimizer.optimization_level=1
zend_extension="/usr/local/zend/ZendOptimizer.so"
EOF

# 安装PHP加速缓存插件eAccelerator
wget http://soft.vpser.net/web/eaccelerator/eaccelerator-0.9.5.3.tar.bz2
tar jxvf eaccelerator-0.9.5.3.tar.bz2
cd eaccelerator-0.9.5.3/
/usr/local/php/bin/phpize
./configure --enable-eaccelerator=shared --with-php-config=/usr/local/php/bin/php-config
make
make install
cd ../

mkdir -p /usr/local/eaccelerator_cache
cat >>/usr/local/php/etc/php.ini<<EOF
[eaccelerator]
zend_extension="/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/eaccelerator.so"
eaccelerator.shm_size="16"
eaccelerator.cache_dir="/usr/local/eaccelerator_cache"
eaccelerator.enable="1"
eaccelerator.optimizer="1"
eaccelerator.check_mtime="1"
eaccelerator.debug="0"
eaccelerator.filter=""
eaccelerator.shm_max="0"
eaccelerator.shm_ttl="3600"
eaccelerator.shm_prune_period="3600"
eaccelerator.shm_only="0"
eaccelerator.compress="1"
eaccelerator.compress_level="9"
eaccelerator.keys = "disk_only"
eaccelerator.sessions = "disk_only"
eaccelerator.content = "disk_only"
EOF

添加fastcgi优化配置
/usr/local/webserver/nginx/conf/nginx.conf
添加如下参数至HTTP层级
fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2 keys_zone=TEST:10m inactive=5m;    
fastcgi_connect_timeout 300;    
fastcgi_send_timeout 300;    
fastcgi_read_timeout 300;    
fastcgi_buffer_size 64k;    
fastcgi_buffers 4 64k;    
fastcgi_busy_buffers_size 128k;    
fastcgi_temp_file_write_size 128k;    
fastcgi_cache TEST;    
fastcgi_cache_valid 200 302 1h;    
fastcgi_cache_valid 301 1d;    
fastcgi_cache_valid any 1m;

下面是对上述代码的含义进行介绍。
第一行代码是为FastCGI缓存指定一个文件路径、目录结构等级、关键字区域存储时间和非活动删除时间。
fastcgi_connect_timeout指定连接到后端FastCGI的超时时间。
fastcgi_send_timeout指定向FastCGI传送请求的超时时间，这个值是已经完成两次握手后向FastCGI传送请求的超时时间。
fastcgi_read_timeout指定接收FastCGI应答的超时时间，这个值是已经完成两次握手后接收FastCGI应答的超时时间。

fastcgi_buffer_size用于指定读取FastCGI应答第一部分需要用多大的缓冲区，这个值表示将使用1个64KB的缓冲区读取应答的第一部分（应答头），可以设置为fastcgi_buffers选项指定的缓冲区大小。

fastcgi_buffers指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答请求。如果一个PHP脚本所产生的页面大小为256KB，那么会为其分配4个64KB的缓冲区来缓存；如果页面大小大于256KB，那么大于256KB的部分会缓存到fastcgi_temp指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于硬盘。一般这个值应该为站点中PHP脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为256KB，那么可以把这个值设置为“16 16k”、“4 64k”等。

fastcgi_busy_buffers_size的默认值是fastcgi_buffers的两倍。

fastcgi_temp_file_write_size表示在写入缓存文件时使用多大的数据块，默认值是fastcgi_buffers的两倍。

fastcgi_cache表示开启FastCGI缓存并为其指定一个名称。开启缓存非常有用，可以有效降低CPU的负载，并且防止502错误的发生，但是开启缓存也会引起很多问题，要视具体情况而定。
fastcgi_cache_valid、fastcgi用来指定应答代码的缓存时间，实例中的值表示将200和302应答缓存一个小时，将301应答缓存1天，其他应答均缓存1分钟。