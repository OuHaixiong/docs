
git add . && git commit -m "删除log" && git push origin master 添加索引并提交更新到线上

git强制覆盖本地文件，拉取代码
git fetch --all
git reset --hard origin/master
git pull

常见命令行的使用
# git remote show origin[或者用git remote -v] 查看某个远端仓库的详细信息，如：克隆的url地址
# git branch -v 查看分支的所有版本
# git branch -a 查看远端的所有分支【其中当前分支前面有星号：*，并用绿色标记出来了】
# git branch 查看[列出]所有的本地分支【当前所在的分支前带有*号，并用绿色标记出来了】
# git branch -d XXX 删除本地分支
# git branch -r -d origin/XXX && git push origin :XXX 删除远程分支
# git checkout . 本地所有修改的没有提及的，都返回到原来的状态【新增的文件没有反应】
# git stash 把所有没有提交的修改暂存到stash里面，可用git stash pop恢复
# git reset --hard [HASH] 返回到某个节点，不保留修改
# git reset --soft [HASH] 返回到某个节点，保留修改
# git checkout -b dev origin/dev checkout远程的dev分支并在本地起名为dev分支，并且切换到本地的dev分支
# git reflog 可以查看git的所有版本记录包括提交信息，这样可以通过reset重置到某个版本[git reset --hard xxx]，也可以找回已删除的commit记录
# git log 查看历史提交记录【进入后可按q退出】；可加参数--pretty=oneline 这样可以；还可以git log -n[5]：查看最近的几条提交记录;
          git log -- filename -n：查看指定文件的提交信息；git log branchName -- ：查看指定分支的提交信息
# git remote set-url origin xxx 修改仓库的远程仓库地址（也可以用来切换仓库地址，即如果是https的地址，可以切换为ssh的地址）

学习网址：
http://git-scm.com/book/zh/
http://my.oschina.net/xdev/blog/114383
http://www.worldhello.net/gotgithub/
https://github.com/gotgit/gotgithub
http://book.51cto.com/art/201107/278731.htm
http://www.bootcss.com/p/git-guide/ git使用
https://www.oschina.net/translate/10-tips-git-next-level 有时间要好好看看
https://www.oschina.net/translate/a-successful-git-branching-model?lang=chs&page=1# 一个成功的git分支模型（值得思考，值得看，不一定照搬）
http://nvie.com/posts/a-successful-git-branching-model/  {上面的中文，下面的英文源文}
https://www.cnblogs.com/linsanshu/p/5512038.html 教你搭建自己的git服务器

sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
sudo apt-get install git git-core

下面是在CentOS 6.X下安装git客户端：
1，centos 6.5 执行：yum -y install curl curl-devel expat-devel gettext-devel openssl openssl-devel zlib zlib-devel perl perl-devel gcc gcc-c++ autoconf (在CentOS 7中执行就已经默认安装了git)
// 貌似这几个包不安装也可以： cpio、tk
(貌似要下33个包)

2，解压并安装
$ tar -zxf git-2.13.1.tar.gz
$ cd git-2.13.1
$ make prefix=/usr/local all
$ sudo make prefix=/usr/local install (如果不设这个路径,就需要做下软连接, sudo ln -s /home/bear/tool/git_1.9.0/bin/git /usr/local/bin/git )
（
如果遇到如下错误：
/bin/sh: 1: autoconf: not found
Makefile:1944: recipe for target 'configure' failed
make: *** [configure] Error 127
解决：
sudo apt-get install autoconf

如果遇到如下错误：
libgit.a(utf8.o): In function `reencode_string_iconv':
/data/tool/git-master/utf8.c:463: undefined reference to `libiconv'
libgit.a(utf8.o): In function `reencode_string_len':
/data/tool/git-master/utf8.c:502: undefined reference to `libiconv_open'
/data/tool/git-master/utf8.c:521: undefined reference to `libiconv_close'
/data/tool/git-master/utf8.c:515: undefined reference to `libiconv_open'
collect2: ld 返回 1
make: *** [git-credential-store] 错误 1
如果你确定已经安装过iconv，且在/usr/local/libiconv目录下[如果没有请安装]，运行如下命令
# make configure    // 生成configure文件
# ./configure --prefix=/usr/local --with-iconv=/usr/local/libiconv    //配置
# make prefix=/usr/local all    // 编译
# make prefix=/usr/local install // 安装
）

3，运行命令查看是否安装成功
运行：git --version 查看git版本
git version 2.11.0
(
如果遇到如下错误：
git: error while loading shared libraries: libiconv.so.2: cannot open shared object file: No such file or directory
解决如下：
vim /etc/ld.so.conf.d/usr_local_lib.conf 添加如下信息：
/usr/local/lib
# /sbin/ldconfig
# git --version
)

获取Git配置信息，执行以下命令：git config --list
git config --global user.email "you@example.com"
git config --global user.name "Your Name" 设置你提交的用户名和邮箱
git config credential.helper store 保存密码到硬盘(当git pull/push的时候输入一次用户名和密码就会被记录)

git init 创建一个Git仓库
git init --bare example.git 创建一个远端仓库
git add . 添加所有文件（包括文件夹和文件）到仓库的索引中(和这个一样： git add *)
git commit -m "提交" 提交更改到本地仓库
git log 查看提交记录
git diff 查看更改
git commit -a -m "These are new changes" 提交修改的文件，-a 表示只提交修改的文件，新增的文件无法提交（注意：这里的提交信息不能为空）
git add . && git commit -m "More chaanges - typo in the commit message" 添加所有文件到索引中，并提交修改
git commit --amend -m "More changes - now correct" 更正【修改】最后一次提交的信息
cd ~/test   进入本地仓库，然后：git clone --bare . ../t2 设置一个远端的Git仓库
git push --set-upstream ../t2 master 推送更改到远端仓库 
git remote add abcd ../t2 为仓库添加一个短名称
git push abcd master 推送到远端仓库  git push ../remote-repository.git
git remote 查看已经存在的远端仓库 
git pull ../t2 拉取（Pull）更改
git remote add bieming bear@192.168.17.130:example.git 为本地仓库起个短名叫bieming,并用用户bear链接到192.168.17.130的example.git仓库
git push bieming master 通过短名提交修改到远端仓库的主干上（下面会要求输入密码）
git clone bear@192.168.17.130:example.git bb  克隆远端仓库到本地文件夹bb
或 git clone http://xxx.xxx.com/project/xx.git ./ 克隆xx项目到当前目录[git clone 只能clone远程库的master分支，无法clone所有分支]



特别注意：使用ssh链接github.com时，需要在本机生成ssh key，然后把key贴到github.com上，具体如下：  (是的,这个是一定要做的,且需要设置提交的用户名和邮箱)
ssh-keygen -t rsa -C "258333309@163.com"
第一次直接回车，第二次输入密码，第三次重复密码
然后将 /home/u32/.ssh/id_rsa.pub 的内容复制到github.com的SSH Keys中
git clone git@github.com:OuHaixiong/yiitest.git yiitest 克隆github.com的一个库

git clean -n
git clean -f 通过以上两个命令，可以还原更改
git checkout 46657577382c23d0cf2d51fb5d5ea54a32d5126c 通commit id 提取老版本的代码

git tag version1.6 -m 'version 1.6'  创建一个标记    ， 然后需要提交到远端仓库
git push origin --tags  推送所有标签 。  git push origin <tag name> 推送指定版本的标签
git checkout <tag_name> 恢复到一个标记
git push origin --delete testversion[tag name] 删除远端仓库一个标签（本地还存在）。  git tag -d 1.0.0 ： 删除本地标签



下面是一串命令操作：建本地仓库，提交，并链接到github.com的远端仓库，提交修改到远端仓库
touch README.md 或 echo "# nodeLibraries" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:OuHaixiong/libs.git[https://github.com/OuHaixiong/nodeLibraries.git]
git push -u origin master


可以通过下面的命令来创建一个新的分支
复制代码

# Syntax: git branch <name> <hash>
# <hash> in the above is optional 
# if not specified the last commit will be used
# If specified the corresponding commit will be used
git branch testing // 创建一个新的分支【如果需要把分支推送到远程分支：git push origin testing】
# Switch to your new branch
git checkout testing // 切换分支到testing
# Some changes
echo "Cool new feature in this branch" > test01
git commit -a -m "new feature"
# Switch to the master branch
git checkout master
# Check that the content of test01 is the old one
cat test01


git merge testing

一旦合并发生了冲突，Git会标志出来，开发人员需要手工的去解决这些冲突。解决冲突以后，就可以将文件添加到索引中，然后提交更改

git config --global alias.cav "commit -a -v" 下次执行命令就可以直接git cav了（给命令一个别名）



git忽略文件
一、git忽略文件有三种:
1、全局范围内有效的忽略文件就是"版本库根目录/.git/info/exclude",全局范围内的所有忽略规则都以行为单位写在这个文件中;
2、局部范围内有效的忽略文件就是.gitignore,这个忽略文件只对某一级目录下的文件的忽略有效;如果某一个目录下有需要被忽略的文件,那么就可以在该目录下手工地创建忽略文件.gitignore,并在这个忽略文件中写上忽略规则,以行为单位,一条规则占据一行;比较特殊的情况就是在版本库的根目录下创建一个忽略文件.gitignore,这时,这个.gitignore忽略文件就对版本库根目录下的文件有效,等价于全局范围内的忽略文件.git/info/exclude;
3、手工指定一个忽略文件,该忽略文件中的规则和语法与前两种是一致的,随便哪一级目录都可以,只要加上对应的路径即可;
   手工指定忽略文件的命令是:
   git config --global core.excludesfile /path/to/.gitignore
   然后手工地在对应位置创建忽略文件.gitignore,并在该文件中写入忽略规则即可;
备注:
这三种范围级别的忽略文件的内容格式和语法都是一致的;

二、忽略文件规则:
忽略规则是对文件名有效的;
A: 空行或#号开始的行,会被忽略;
B: 可以使用通配符:
   *        任意字符;
   ?        单个字符;
   [abc]    多种可能的字符a、b或c;
   [a-z0-9] 表示在某个范围内进行匹配;
   \        转义字符;
   !        表示取反(不忽略),写在某条规则的前面;
C: 路径分隔符"/";如果"/"后面的名称是个目录,则该目录以及该目录下的所有文件都会被忽略;如果"/"后面的名称是个文件,则该文件不会被忽略;
   例如: /name
   如果name是个目录,则目录name和name下的所有文件都会被忽略;如果name是个文件,则该文件不会被忽略;
D: .gitignore文件也可以忽略自己,只要把自己的名字写进来即可;
E: 一条(行)忽略规则只对某一个目录下的文件有效,而对该目录下的子目录中的文件无效;
F: 一条(行)忽略规则也可以只对单个文件有效(忽略单个指定的文件);

在本目录下有个.gitignore文件，编辑该文件输入忽略规则即可：
例如:
*.a,*.ldb #忽略所有以.a和.ldb为后缀的文件;
!lib.a    #不忽略文件lib.a;
/TODO     #只忽略此目录下TODO文件,子目录的TODO不被忽略;也可以多目录如：/mtk/if.h
build/    #忽略build目录下的所有文件;如：/electron/node_modules 忽略node_modules文件夹下面的所有文件和文件夹
doc/*.txt #只忽略doc/下所有的txt文件,但是不忽略doc/subdir/下的txt文件;
*.[oa]    #支持通配符：过滤所有以.o或者.a为扩展名的文件

在有的时候，就算加入了.gitignore文件里也无法忽略文件或文件夹，是因为之前就加入了版本控制，现在再忽略是不起作用的
解决：【在缓存中移除掉要忽略的文件】
1，提交你已有的改变 : git commit -m "XXX" && git push origin master
2，在缓存中移除你要忽略的文件或文件夹：git rm --cached XXX 并在.gitignore中添加刚才要忽略的文件或文件夹的路径
3，添加到索引：git add .
4，提交更改：git commit -m "fixed untracked files" && git push origin master

git的实际应用场景
1，测试不充分就进行了一次上线，要回滚的话，如下:
git reset --hard HEAD~1  // 回滚到上一版本。   git reset --hard HEAD~3：将最近3次的提交回滚





