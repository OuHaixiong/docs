
redis：master-slave(主从)同步

1，解压并安装
tar -zxvf redis-2.8.19.tar.gz 
cd redis-2.8.19 
make
make install

1.5，可能会出现的错误提示
>>提示1：
make[3]: gcc：命令未找到
>>解决
yum -y install gcc-c++

>>提示2：
在包含自 adlist.c：34 的文件中:
zmalloc.h:50:31: 错误：jemalloc/jemalloc.h：没有那个文件或目录
zmalloc.h:55:2: 错误：#error "Newer version of jemalloc required"
>>解决
make的时候加上 MALLOC=libc 参数
make PREFIX=/data/apps/redis2.6.14 MALLOC=libc install


2，创建相应的目录，并把文件和配置拷贝到相应的目录
mkdir -p /usr/local/redis/{bin,etc,var}  
cp redis.conf /usr/local/redis/etc/  
cp /usr/local/bin/redis-* /usr/local/redis/bin/ 

3，修改配置文件如下： vim /usr/local/redis/etc/redis.conf  (具体配置文件可参考“配置备份/redis_master.conf”)
# bind 127.0.0.1  # 如果需要外部连接的话，这个注释掉
timeout 300
daemonize yes
pidfile /usr/local/redis/var/redis.pid  # pid文件保存路径
logfile "/data/logs/redis/redis.log" # 日记文件保存路径
dir /data/db/redis/ # 数据存放路径
requirepass ouhaixiong # 设置密码

创建日志文件夹（日志目录）：mkdir -p /data/logs/redis/（如果没有的话）
创建数据目录：mkdir -p /data/db/redis/ （如果没有的话）


4，命令行下进行测试：
sudo /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf （启动redis）
netstat -ntpl |grep 6379 
sudo /usr/local/redis/bin/redis-cli -h 192.168.17.130
192.168.17.130:6379> set number 123
OK 
192.168.17.130:6379> get number
"123"
192.168.17.130:6379> del number
(integer) 1
192.168.17.130:6379> get number
(nil)
192.168.17.130:6379> quit

命令行输入密码进行访问如下：
/usr/local/redis/bin/redis-cli -h 127.0.0.1 -p 6379
127.0.0.1:6379> keys *
(error) NOAUTH Authentication required.  [提示没有权限]
127.0.0.1:6379> auth ouhaixiong
OK （这样就可以访问了）   或者在登录时就可以直接输入：/usr/local/redis/bin/redis-cli -h 127.0.0.1 -p 6379 -a ouhaixiong

开启6379端口：
/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT
/etc/rc.d/init.d/iptables save
/etc/init.d/iptables restart

可加入开机启动：（貌似在CentOS7中无效；解决：因为在CentOS 7中rc.local的文件权限被降低，执行chmod +x /etc/rc.d/rc.local即可）
vim /etc/rc.local
/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf

5，关闭主节点的redis，复制/usr/local/redis/目录至从节点
ps -ef |grep redis
root      5613     1  0 16:45 ?        00:00:06 /usr/local/redis/bin/redis-server *:6379     
kill -QUIT 5613  （退出主节点）
scp -rvp /usr/local/redis/ root@192.168.17.134:/usr/local/   （拷贝文件）
[root@localhost etc]# grep -v '^#'  /usr/local/redis/etc/redis.conf  |grep -v '^$'      （配置文件如下） 
daemonize yes
pidfile /usr/local/redis/var/redis.pid
port 6379
tcp-backlog 511
timeout 300
tcp-keepalive 0
loglevel notice
logfile ""
databases 16
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename salve.rdb （特别注意这里）
dir ./
slaveof 192.168.17.130 6379   （特别注意这里）
slave-serve-stale-data yes
slave-read-only yes
repl-disable-tcp-nodelay no
slave-priority 100
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-entries 512
list-max-ziplist-value 64
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes     

6，分别启动主从节点并进行测试
u32@ubuntu:/usr/local/redis/var$ sudo /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf 
[root@localhost etc]# /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf
u32@ubuntu:/usr/local/redis/var$ netstat -ntpl |grep 6379
tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      5613/redis-server *
tcp6       0      0 :::6379                 :::*                    LISTEN      5613/redis-server *
sudo /usr/local/redis/bin/redis-cli -h 192.168.17.130
redis 192.168.17.130:6379> set number 1  
OK  
redis 192.168.17.130:6379> get number   
"1"  
redis 192.168.17.130:6379> quit  
/usr/local/redis/bin/redis-cli -h 192.168.17.134
192.168.17.134:6379> get number
"1"
192.168.17.134:6379> del number
(error) READONLY You can't write against a read only slave.
192.168.17.134:6379> quit
redis-cli shutdown // 关闭redis
关闭某个端口上的redis
# /usr/local/redis/bin/redis-cli -p 6379 shutdown //关闭6379端口的redis

到此，配置OK

7，配置phpredis扩展 （针对php 7 的redis需要单独的分支；后面https://github.com/OuHaixiong/phpredis下载了一个develop版也能支持php7）
下载phpredis
wget https://codeload.github.com/nicolasff/phpredis/zip/master
unzip phpredis-master.zip
cd phpredis-master/
sudo /usr/bin/phpize 
sudo ./configure [--with-php-config=/usr/local/php/bin/php-config]
sudo make
sudo make install
提示：扩展已生成在/usr/lib/php5/20090626+lfs/中
cd /etc/php5/conf.d 进入配置扩展
sudo vim redis.ini 加入
extension=redis.so
[redis]
重启web服务器
sudo /etc/init.d/apache2 restart







1. Redis默认不是以守护进程(后台)的方式运行，可以通过该配置项修改，使用yes启用守护进程
    daemonize no
2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
    pidfile /var/run/redis.pid // pid文件位置(进程锁文件路径)
3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
    port 6379
4. 绑定的主机(IP)地址，默认值为127.0.0.1
    bind 127.0.0.1 // 表示仅仅允许通过127.0.0.1这个ip地址进行访问
5. 当客户端闲置多少秒后关闭(断开)连接，默认300秒，如果指定为0，表示关闭该功能
    timeout 300 //  请求超时时间
6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
    loglevel verbose
7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
    logfile stdout // log文件位置，可为：/xxx/xx/redis.log
8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
    databases 16 // 开启数据库的数量
9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
    # save <seconds> <changes> // 保存快照的频率，第一个*表示多长时间，第二个*表示执行多少次写操作
    # Redis默认配置文件中提供了三个条件：
    save 900 1
    save 300 10
    save 60 10000
    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
    rdbcompression yes
11. 指定本地数据库文件名，默认值为dump.rdb
    dbfilename dump.rdb // 数据快照文件名（只是文件名，不包括目录）
12. 指定本地数据库存放目录
    dir ./  // 数据快照的保存目录（这个是目录）/usr/local/redis/db/
13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
    slaveof <masterip> <masterport>
14. 当master服务设置了密码保护时，slav服务连接master的密码
    masterauth <master-password>
15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
    requirepass foobared
16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
    maxclients 128
17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
    maxmemory <bytes>
18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
    appendonly no  // 是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。
19. 指定更新日志文件名，默认为appendonly.aof
     appendfilename appendonly.aof
20. 指定更新日志条件，共有3个可选值： 
    # no：表示等操作系统进行数据缓存同步到磁盘（快）； 分别是每次写都强制调用fsync
    # always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） ；不调用fsync等待系统自己同步
    # everysec：表示每秒同步一次（折中，默认值）；每秒启用一次fsync
    appendfsync everysec  // appendonlylog如何同步到磁盘
21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
     vm-enabled no
22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
     vm-swap-file /tmp/redis.swap
23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
     vm-max-memory 0
24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
     vm-page-size 32
25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
     vm-pages 134217728
26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
     vm-max-threads 4
27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
    glueoutputbuf yes
28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
    hash-max-zipmap-entries 64
    hash-max-zipmap-value 512
29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
    activerehashing yes
30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
    include /path/to/local.conf



#日志记录等级，有4个可选值，debug，verbose（默认值），notice，warning
loglevel verbose
#指定日志输出的文件名，默认值为stdout，也可设为/dev/null屏蔽日志
logfile stdout
#可用数据库数，默认值为16，默认数据库为0
databases 16
#保存数据到disk的策略
#当有一条Keys数据被改变是，900秒刷新到disk一次
save 900 1
#当有10条Keys数据被改变时，300秒刷新到disk一次
save 300 10
#当有1w条keys数据被改变时，60秒刷新到disk一次
save 60 10000
#当dump .rdb数据库的时候是否压缩数据对象
rdbcompression yes
#本地数据库文件名，默认值为dump.rdb
dbfilename dump.rdb
#本地数据库存放路径,默认值为 ./
dir ./

###########  Replication #####################
#Redis的复制配置
# slaveof <masterip> <masterport> 当本机为从服务时，设置主服务的IP及端口
# masterauth <master-password> 当本机为从服务时，设置主服务的连接密码

#连接密码
# requirepass foobared

#最大客户端连接数，默认不限制
# maxclients 128
#最大内存使用设置，达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，任到达最大内存设置，将无法再进行写入操作。
# maxmemory <bytes>

#是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认值为no
appendonly no
#更新日志文件名，默认值为appendonly.aof
#appendfilename
#更新日志条件，共有3个可选值。no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次（默认值）。
# appendfsync always
appendfsync everysec
# appendfsync no

################ VIRTUAL MEMORY ###########
#是否开启VM功能，默认值为no
vm-enabled no
# vm-enabled yes
#虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
vm-swap-file logs/redis.swap
#将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的 (Redis的索引数据就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0。
vm-max-memory 0
vm-page-size 32
vm-pages 134217728
vm-max-threads 4

############# ADVANCED CONFIG ###############
glueoutputbuf yes
hash-max-zipmap-entries 64
hash-max-zipmap-value 512
#是否重置Hash表
activerehashing yes

注意：Redis官方文档对VM的使用提出了一些建议:
** 当你的key很小而value很大时,使用VM的效果会比较好.因为这样节约的内存比较大.
** 当你的key不小时,可以考虑使用一些非常方法将很大的key变成很大的value,比如你可以考虑将key,value组合成一个新的value.
** 最好使用linux ext3 等对稀疏文件支持比较好的文件系统保存你的swap文件.
** vm-max-threads这个参数,可以设置访问swap文件的线程数,设置最好不要超过机器的核数.如果设置为0,那么所有对swap文件的操作都是串行的.可能会造成比较长时间的延迟,但是对数据完整性有很好的保证.





中文说明：
1,是否以后台进程运行，默认为no
daemonize no
2,如以后台进程运行，则需指定一个pid，默认为/var/run/redis.pid
pidfile /var/run/redis.pid
3,监听端口，默认为6379
port 6379
4,绑定主机IP，默认值为127.0.0.1（注释）
bind 127.0.0.1
5,超时时间，默认为300（秒）
timeout 300
6,日志记录等级，有4个可选值，debug，verbose（默认值），notice，warning
loglevel verbose
7,日志记录方式，默认值为stdout
logfile stdout
8,可用数据库数，默认值为16，默认数据库为0
databases 16
9,指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。这个可以多个条件配合，比如默认配置文件中的设置，就设置了三个条件。
900秒（15分钟）内至少有1个key被改变
save 900 1
300秒（5分钟）内至少有10个key被改变
save 300 10
10,存储至本地数据库时是否压缩数据，默认为yes
rdbcompression yes
11,本地数据库文件名，默认值为dump.rdb
dbfilename /root/redis_db/dump.rdb
12,本地数据库存放路径，默认值为 ./
dir /root/redis_db/
13,当本机为从服务时，设置主服务的IP及端口（注释）
slaveof <masterip> <masterport>
14,当本机为从服务时，设置主服务的连接密码（注释）
masterauth <master-password>
15,连接密码（注释）
requirepass foobared
16,最大客户端连接数，默认不限制（注释）
maxclients 128
17,设置最大内存，达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，任到达最大内存设置，将无法再进行写入操作。（注释）
maxmemory <bytes>
18,是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认值为no
appendonly yes
19,更新日志文件名，默认值为appendonly.aof（注释）
appendfilename /root/redis_db/appendonly.aof
20,更新日志条件，共有3个可选值。no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次（默认值）。
appendfsync everysec
21,是否使用虚拟内存，默认值为no
vm-enabled yes
22,虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
vm-swap-file /tmp/redis.swap
23,将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的 (Redis的索引数据就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0。
vm-max-memory 0
24,虚拟内存文件以块存储，每块32bytes
vm-page-size 32
25,虚拟内在文件的最大数
vm-pages 134217728
26,可以设置访问swap文件的线程数,设置最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的.可能会造成比较长时间的延迟,但是对数据完整性有很好的保证.
vm-max-threads 4
27,把小的输出缓存放在一起，以便能够在一个TCP packet中为客户端发送多个响应，具体原理和真实效果我不是很清楚。所以根据注释，你不是很确定的时候就设置成yes
glueoutputbuf yes
28,在redis 2.0中引入了hash数据结构。当hash中包含超过指定元素个数并且最大的元素没有超过临界时，hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值
hash-max-zipmap-entries 64
29,hash中一个元素的最大值
hash-max-zipmap-value 512
30,开启之后，redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使 用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置 为yes，以便能够尽可能快的释放内存
activerehashing yes