gzip是GNU zip的缩写，它是一个GNU自由软件的文件压缩程序，可以极大的加速网站。有时压缩比率高到80%,近来测试了一下,最少都有40%以上,还是相当不错的。
GZip需要安装进nginx时开启 --with-http_gzip_static_module 模块（在线实时压缩输出数据流）

配置指令详细注释如下：
gzip on;
// 默认值off，该指令用于开启或关闭gzip模块

gzip_min_length 1k;
// 默认值0，不管页面多大都压缩
// 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。建议设置成大于1k的字节数，小于1k可能会越压越大。（单位待确认，貌似B）

gzip_buffers 4 16k;
// 默认值: gzip_buffers 4 4k/8k
// 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，按照原始数据大小以16k为单位的4倍申请内存。
// 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。

gzip_http_version 1.1;
// 默认值: gzip_http_version 1.1(就是说对HTTP/1.1协议的请求才会进行gzip压缩)
// 识别http的协议版本(1.0/1.1)。由于早期的一些浏览器或者http客户端，可能不支持gzip自解压，用户就会看到乱码，所以做一些判断还是有必要的。
// 注：99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。
// 假设我们使用的是默认值1.1，如果我们使用了proxy_pass进行反向代理，那么nginx和后端的upstream server之间是用HTTP/1.0协议通信的，
// 如果我们使用nginx通过反向代理做Cache Server，而且前端的nginx没有开启gzip，同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩

gzip_comp_level 2;
//gzip压缩比（压缩级别），默认值：1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)。建议设置为6

gzip_types text/plain application/x-javascript text/css application/xml [mime-type...]
// 默认值：gzip_types text/html (默认不对js/css文件进行压缩)。对哪些类型的文件启用gzip压缩
// 压缩类型，匹配MIME类型进行压缩，无论是否指定text/html类型总是会被压缩的。不能用通配符 text/*，设置哪压缩种文本文件可参考 conf/mime.types
// gzip_types text/plain text/css application/json text/x-component application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/x-icon image/svg+xml image/jpeg image/gif image/png font/opentype;

gzip_vary on;
// 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩

gzip_static on|off   // 这个参数最好先别设，了解清楚了再设置
// nginx对于静态文件的处理模块
// 该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件。
// 可以google"nginx gzip_static"了解更多

gzip_proxied any;
// 默认值：off，取值[off|expired|no-cache|no-store|private|no_last_modified|no_etag|auth|any]
// Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。
   off - 关闭所有的代理结果数据的压缩
   expired - 启用压缩，如果header头中包含 "Expires" 头信息
   no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息
   no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息
   private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息
   no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息
   no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息
   auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息
   any - 无条件启用压缩,压缩所有结果数据

gzip_disable "MSIE [1-6]." 
// gzip_disable "msie6"; 禁用IE6的gzip压缩，又是因为杯具的IE6。
// IE6的某些版本对gzip的压缩支持很不好，会造成页面的假死，今天产品的同学就测试出了这个问题
// 后来调试后，发现是对img进行gzip后造成IE6的假死，把对img的gzip压缩去掉后就正常了。

下面是启用gzip的主要事项（非常重要）：
    1）然而实际情况是图片实际不需要压缩——当然我是指网络传输格式的，这些文件已经高度压缩过了（明证是用7Z格式压缩同样为300M大小的文本和图片格式，前者可以压到2M，后者几乎大小不变），启用GZIP不但相当占用资源，还会起负面效果。
    2）对于多数以文本为主的站点来说，文本自身内容占流量的绝大部分。虽然单个文本体积并不算大，但是如果数量众多的话，流量还是相当可观。启用GZIP以后，可以大幅度减少所需的流量。
    3）以上代码可以插入到 http {...}整个服务器的配置里，也可以插入到虚拟主机的 server {...}或者下面的location模块内。
    4）值得注意的是纯文本类文件的Gzip压缩，效果颇佳，所有的浏览器都能很好支持。而图片格式不不论是PNG/GIF还是JPG，在IE6下支持都非常差，甚至会出现卡死的情况。

最后需要说明的是GZIP是否起作用，可以用网页GZIP压缩检测工具来测试（站长工具）。 : http://tool.chinaz.com/Gzips/
通过curl测试：curl -I -H "Accept-Encoding:gzip,deflate" "https://www.makeblock.com"
curl -I -H "Accept-Encoding:gzip,deflate" "https://www.makeblock.com/wp-includes/css/dashicons.min.css?ver=4.9"