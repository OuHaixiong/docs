
mac下安装docker
1，到官网下载stable版：https://store.docker.com/editions/community/docker-ce-desktop-mac?tab=description
2，双击Docker.dmg文件进行安装，一路next即可，安装完后会在右上角出现小鲸鱼的图标。也可以到官方文档中查看安装步骤：https://docs.docker.com
3，下面可以通过命令行直接操作docker了
4，到store.docker.com或hub.docker.com可以下载镜像文件
5，运行docker --version可查看docker的版本（docker-compose --version、docker-machine --version）


docker常用的命令
docker ps -a 显示所有的容器
docker ps    显示所有正在运行的容器
docker images 显示所有的镜像
docker run -d -p 80:80 --name webserver nginx[841a]   通过docker镜像[image]运行一个docker容器[container]
例如：docker run -dit -p 80:80 --name gyt_develop_1.1.0 gyt_develop:v1.1.0  /bin/bash
# 841a ：是镜像ID的前四位，也可以写全
# -d 让Docker容器跑在后台
# -i 容器的标准输入保持打开
# -t Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入
# --name XXX 容器名
# -v 映射目录
# -w /XX 设置工作目录；此设置将覆盖dockfile中的WORKDIR设置
# -p 端口映射
如果需要有挂载目录：docker run -dit --privileged=true -v /data[宿主机的绝对路径]:/opt[容器里面的绝对路径] --name gyt_develop_1.1.0 gyt_develop:v1.1.0[镜像:版本]  /bin/bash
docker run -dit --privileged=true -p 1337:1337  -v /Users/bear/Downloads/www/webserver_test:/data/www/webserver --name xxx[容器名] 2737dede0818[镜像ID/镜像名] /bin/bash 把一个宿主机上的目录挂载到镜像里
docker run -it -p 1337:1337 -v /Users/bear/Downloads/www/webserver_test:/data/www/webserver 2737dede0818[镜像ID] /bin/bash 把一个宿主机上的目录挂载到镜像里，并进入容器里
docker run -d -it -p 1337:1337 -v /Users/bear/Downloads/www/test/:/data/www/mBlock/ --name mBlock_web-server web-server_node-6.9.2 /bin/bash
docker search gyt_develop 搜索已发布的镜像
docker pull node:6.9.2 从官方拉取一个nodejs的镜像(docker pull bearou/gyt_develop:v1.1.0)
docker build -t node_webserver_test . 在DockerFile所在的目录下，构建一个Image（名称为：node_webserver_test）
docker logs e31 打印容器日记，e31是容器[Container]ID的前三位
docker exec -i -t e31a /bin/bash 进入容器里面，进去后就像操作普通的linux一样，如果需要退出就执行exit。启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）
docker stop e31a 终止一个容器[docker stop $(docker ps -q):停用全部运行中的容器]
docker start/restart e31adea47be3 启动和重启一个容器
docker rm 841a6921f3bc 删除一个容器 【docker rm $(docker ps -aq):删除全部容器】
docker rmi a7376d9a4848 删除一个镜像
docker rmi $(docker images --filter dangling=true -q) 删除pull过程或者create过程产生的临时镜像，剩下的都是有用的镜像
docker stop $(docker ps -q) & docker rm $(docker ps -aq) 停用并删除所有容器
docker save -o node.io[node.tar保存路径] faaadb4aaf9b[镜像id] 通过docker save命令，将镜像保存为tar文件（或 docker save nginx:latest > /root/docker-images/nginx.tar）
docker load -i /root/bear/node.tar 通过docker load命令将tar文件【镜像】加载进来（或 docker load --input /root/docker-images/nginx.tar；还有一种符号方式：docker load < /root/docker-images/nginx.tar）
docker commit -a 'Bear' -m 'base develop tool' c0588e8fb02b[容器ID或容器名] gyt_develop:v1.1.0[镜像名:标签] 将容器保存为镜像（-a：修改人；-m：备注；）
docker tag gyt_develop:v1.1.0 bearou/gyt_develop:v1.1.0 修改docker镜像的名称（因为如果要推送到Docker Hub的话需要“注册用户名/镜像名”）
docker push bearou/gyt_develop:v1.1.0[注册id/镜像名:tag] 推送镜像到Docker Hub（速度会很慢，需要耐心等待，如果失败下次还可以重传，已推送上去的会保留）
docker login --username=XXX registry.cn-XXX.alixx.com 登录docker云服务器(如果是直接登录hub.docker.com的话用docker login即可，后面会要你输入用户名和密码)
docker push registry.cn-XXX.XXX.com/makeblock/mblock-webservice-dev 把当前的镜像push到服务器





下面是典型的Dockerfile的写法：
FROM node:6.9.2                  # 用本地node:6.9.2的镜像作为基础镜像，进行构建（如果本地没有将到服务器上去获取）
RUN mkdir -p /Users/webserver    # 执行命令行，在镜像中创建目录
WORKDIR /Users/webserver         # 将我们创建的目录作为工作目录
COPY . /Users/webserver          # 拷贝本机当前目录下的所有文件到Image的/Users/webserver文件夹下
#RUN npm install                 # 运行命令，安装本目录下的所有node依赖包
EXPOSE 1337                      # 暴露端口号给主机，这样我们就能从外部访问镜像能的应用了
CMD ["npm", "start"]             # 运行命令，启动应用


docker容器互访
1，安装好docker后，运行如下明亮创建bridge网络：
$ docker network create dev_net

2，运行容器连接到dev_net网络
$ docker run -dit --privileged=true -p 80:80 -v /Users/bear/Downloads/www:/data/www --name c_gyt_develop_v1.1.2 --network dev_net --network-alias gyt_develop bearou/gyt_develop:v1.1.2 /etc/init.d/start_webserver.sh
开启另一个容器：docker run -dit --name c_kafka_v2.12 --network dev_net --network-alias kafka bearou/kafka:v2.12 /bin/bash

3，在一个容器里ping另一个容器，测试如下：
$ docker exec -it c_gyt_develop_v1.1.2 /bin/bash
bash-4.2# ping kafka          
PING kafka (172.18.0.3) 56(84) bytes of data.
64 bytes from c_kafka_v2.12.dev_net (172.18.0.3): icmp_seq=1 ttl=64 time=0.078 ms
64 bytes from c_kafka_v2.12.dev_net (172.18.0.3): icmp_seq=2 ttl=64 time=0.132 ms

4，若访问容器中的服务，可以使用： [网络别名]:[服务端口号]
推荐使用这种方法：自定义网络。因为使用的是网络别名，可以不需要顾虑IP是否变动，只要连接到docker内部bridge网络即可互访。bridge页可以建立多个，隔离在不同的网段。
