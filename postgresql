CentOS 7 默认系统安装Postgresql： (最好不要系统自带的，版本太低，有些功能不支持)
1，yum install -y postgresql-server postgresql postgresql-contrib
2，初始化：postgresql-setup initdb
3，重启：systemctl restart[start/stop] postgresql.service
4，登录后进行修改密码，postgres的默认密码为空   （貌似修改了密码没有什么用，原因是因为没有设置pg_hba.conf中登录的ip和用户需要用密码进行登录）
# sudo su - postgres 切换postgres用户
-bash-4.2$ psql 切换成执行sql控制体 【psql (9.2.23)】
postgres=# alter user postgres password '123456';
\q :退出
exit ：退出用户
5，重启后，可查看端口：netstat -tunlp |grep 5432
6，使用上面的步骤登录后，创建用户：postgres=# create user ybapi with password '123456';
7，创建数据库，并指定拥有者：postgres=# create database ybapi owner ybapi;
8，给数据库赋权：postgres=# grant all privileges on database ybapi to ybapi;
9，退出postgres用户，并用ybapi用户进行登录：
    postgres=# \q
	-bash-4.2$ psql -U ybapi -d ybapi -h 127.0.0.1 -p 5432 -W  （登入其他用户时一定要退出postgres用户后再来登录）
	如果输入密码后，仍然无法登录且提示：
	psql: FATAL:  Ident authentication failed for user "ybapi"
	需要修改配置：vim /var/lib/pgsql/data/pg_hba.conf，
	把：   host    all             all             127.0.0.1/32           ident
	改为： host    all             all             127.0.0.1/32            md5
	然后重启postgresql
10，登录成功后会显示：ybapi=>   这样就可以执行sql语句了	


配置文件在：vim /var/lib/pgsql/data/pg_hba.conf 如果需要所有的ip都能访问的话，加入如下一行：
host all all 0.0.0.0/0 md5 （CONNECTIONTYPE DATABASE USER ADDRESS METHDO md5即用密码认证身份登录）
还需要修改：/var/lib/pgsql/data/postgresql.conf
listen_addresses = '*' 监听地址 （默认只能本机访问： listen_addresses = 'localhost'）
postgresql.conf文件中涉及诸如：最大连接数、监听地址，监听端口、日志、内存、硬盘等等各种设置

假如允允许10.1.1.0~10.1.1.255网段登录数据库：
host    all    all    10.1.1.0/24    md5

安装目录/var/lib/pgsql及目录下文件或文件夹的可读、可写、可操作统统只开放给用户postgres

在终端输入psql命令时，常常会遇到下面这个错：
psql: could not connect to server: No such file or directory
Is the server running locally and accepting
connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
这个错有两个解决方式：
1）    重启postgresql服务。
2）    删掉/usr/local/var/postgres/postmaster.pid文件。

默认安装的路径：
pg_dump  :  /usr/bin/pg_dump
pgsql    :  /usr/lib64/pgsql
pg_restore: /usr/bin/pg_restore




下面在centos7 安装postgresql10
1，更新源，访问https://yum.postgresql.org/repopackages.php找到Available Repository RPMs -> PostgreSQL 10 -> CentOS 7 - x86_64 右键复制链接地址
2，执行 yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm -y
3，先查看postgresql源：yum list |grep postgresql 找到要安装的源
4，执行：yum install -y postgresql10.x86_64 postgresql10-devel.x86_64 postgresql10-server.x86_64 postgresql10-contrib.x86_64
5，初始化：/usr/pgsql-10/bin/postgresql-10-setup initdb
6，启动数据库并设置开机启动
    sudo systemctl start postgresql-10
    sudo systemctl enable postgresql-10.service
7，登录postgresql并设置密码:
    # su - postgres
    -bash-4.2$ psql
    postgres=# ALTER USER postgres WITH PASSWORD '123456';
    退出：\q
8，默认情况下postgresql是不用密码不支持远程登录的。我们要用密码登录，需要修改配置文件：vim /var/lib/pgsql/10/data/pg_hba.conf
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
# IPv6 local connections:
host    all             all             ::1/128                 ident
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            ident
host    replication     all             ::1/128                 ident
改成：
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     md5
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local   replication     all                                     peer
#host    replication     all             127.0.0.1/32            ident
#host    replication     all             ::1/128                 ident
host      all            all             0.0.0.0/0               md5
    修改远程访问：vim /var/lib/pgsql/10/data/postgresql.conf
    #listen_addresses = 'localhost'
    #port = 5432
    改成：
    listen_addresses = '*'
    port = 5432
9，修改配置后需要重启：systemctl restart postgresql-10
10，可以使用刚才更改过密码的账号登录了
    # su - postgres
    -bash-4.2$ psql -U postgres -h 127.0.0.1 -p 5432 -W    成功后显示： psql (9.2.23, server 10.5)  ->   postgres=#
11，  创建用户：create user ybapi with password '123456';
12， 创建数据库，并指定拥有者：postgres=# create database ybapi owner ybapi;
13， 给数据库赋权：postgres=# grant all privileges on database ybapi to ybapi;
14， 退出postgres用户，并用ybapi用户进行登录：
    postgres=# \q
    -bash-4.2$ psql -U ybapi -d ybapi -h 127.0.0.1 -p 5432 -W
15，执行sql语句：
    drop table if exists uploadfile;
    create table uploadfile (
      id bigserial,
      rid varchar(64) not null,
      appid varchar(32) not null,
      "hash" varchar(64) not null,
      size int4 default 0,
      path varchar(256) not null,
      width int4 default 0,
      height int4 default 0,
      duration int4 NOT NULL DEFAULT 0,
      extinfo jsonb,
      "name" text NOT NULL DEFAULT '',
      create_time int4 default 0,
      update_time int4 default 0,
      money NUMERIC(20, 2) default 0.00, // 全部20位，小数点后2位
      primary key(id)
    );


安装目录：/usr/pgsql-10
数据目录：/var/lib/pgsql/10/data

如下是创建字段时，相等的语句：
real == float4
bigserial == int8 DEFAULT nextval('admin_action_id_seq'::regclass) NOT NULL 自增int8型


命令行：
1, 删除表：drop table if exists admin_user; 或 drop table admin_action; // 删除表后，或同时把自增id表（admin_action_id_seq）给删除
2, 增加一列 ：alter table table_name add column_name datatype;alter table feedback add column type smallint default 1;
3, 删除一列：alter table table_name drop column_name; alter table business drop artificial_person;
4, 更改列的数据类型: ALTER TABLE table_name ALTER  column_name TYPE datatype; 如果有数据或数据类型不匹配时，基本是修改不成功的。（原因是默认值和数据类型需要分别设置）
                    ALTER TABLE product ALTER  descimgs TYPE jsonb USING descimgs::jsonb[]; 
                    其实修改字段类型和设置默认值是需要分开的，如：alter table expression alter column formula type varchar(2048);
                    删除默认值 ： alter table expression alter column formula drop default;
                    设置默认值 ： alter table expression alter column formula set default '';
                    如果默认值之前是： 默认为空字符串，修改后的字段也需要这个默认值，是可以不需要修改的
5, 表重命名：ALTER TABLE table_name RENAME TO new_name;
6, 更改列的名字：ALTER TABLE table_name RENAME column_name to new_column_name;
7, 字段的not null设置：ALTER TABLE table_name ALTER column_name {SET|DROP} NOT NULL;
8, 给列添加default：ALTER TABLE table_name ALTER column_name SET DEFAULT expression;
9, 修改主键id的自增值从某个值开始:alter sequence business_id_seq restart with 600002;
10, 查询：select * from product where title='小米8' 特别注意这里，如果是字符型字段，不能用双引号(")，只能用单引号(')
11, \q ：退出
12, \l : 列出所有库  ( \c databaseName 进入数据库【切换数据库】 )
13, \du: 列出所有用户
14, \d : 列出库下所有表     (\dt:查看所有表，\d tableName: 查看表结构)
15, 创建索引：create unique index user_id_index on admin_user_action using btree("admin_user_id", "xxx"); // unique index:唯一索引；index：普通索引
16, 备份数据库表结构和数据：/usr/pgsql-10/bin/pg_dump -h 127.0.0.1 -p 5432 -U postgres ybapi > /data/ybapi.sql  使用pg_dumpall可以备份本地所有库：pg_dumpall -U username > /xxx/all.sql
17, 恢复数据库： /usr/bin/psql -h127.0.0.1 -p 5432 -U postgres -d abc < /data/abc.sql   -d：数据库名称  (psql -U username -f backupfile.sql 还原完整备份并忽略还原过程中发生的任何错误[-f:代表文件路径])
18, 删除数据库：postgres=# drop database abc; // 如果有用户打开了数据库，是无法删除的
19, 删除用户：postgres=# drop role devops; // 如果该用户还拥有数据库，是无法删除该用户的，需要先删除数据库后，才能删除该用户
20, 创建用户：postgres=# create user root with password '123456';
21, 创建数据库并指定所有者：postgres=# create database testdb owner root;  (grant all privileges on database databaseName to userName;)
22, 登录数据库：-bash-4.2$ psql -h127.0.0.1 -p5432 -Uroot -dtestdb
23, 修改主键id的自增值从某个值开始：alter sequence business_id_seq restart with 600002;
24, 备份指定表结构和数据： /usr/bin/pg_dump -U root testdb -t tb1  > /data/testdb_tb1.sql // 只能备份单表
25, 备份多个表：/usr/bin/pg_dump -U root testdb -t tb1 -t admin_action  > /data/testdb_tbs.sql
26, 查找邀请人大于100的所有用户列表：select * from ( select user_id, count(user_id) num from invite where type=0 group by user_id) as i where i.num>99 order by i.num desc;
27, 从更新的多条数据是从另一张表里来的：UPDATE sphinx_counter SET (min_id, max_id) = (select MIN(id), MAX(id) from product) where table_name='product'
28, 从别的表中插入多条数据：INSERT INTO sphinx_counter (table_name, min_id, max_id) VALUES ('product', (select MIN(id) from product), (select MAX(id) from product))
29, 时间戳字符串转整型：select (date_part('epoch',CURRENT_TIMESTAMP))::bigint
30，多条记录更新，并加入时间戳 ： UPDATE sphinx_counter SET (min_id, max_id, update_time) = (select MIN(id), MAX(id), (date_part('epoch', CURRENT_TIMESTAMP))::bigint from product)  where table_name='product'
31，导入sql文件： psql -h localhost -d databaseName -U username -f /xxx/xxx/xx.sql
32，删除索引：drop index product_recommend_type_idx;
33，修改用户密码：alter user root with password '123456';
34，外键级联删除或级联更新： ALTER TABLE table_name ADD [ CONSTRAINT constraint_name ] FOREIGN KEY ( column_name [, … ] ) REFERENCES reftable [ ( refcolumn [, … ] ) ] [ MATCH matchtype ] [ ON DELETE action ] [ ON UPDATE action ]
      比如：alter table receipt_attributes add constraint FK_RECEIPT_GENRE_ID foreign key (receipt_genre_id) references receipt_genre(id) on delete CASCADE;  
    [ ON DELETE action ] [ ON UPDATE action ] 当删除被引用行或者更新被引用列时，对于引用表或引用列,不同的action有不同的行为。可用的action如下：
      NO ACTION 如果违反外键约束会产生一个错误。如果约束被延迟，那么到事务结束检查约束时如果仍然因为存在一个引用行而违反外键约束，则仍会产生错误。这是默认值。其他的动作action都不能被延迟。
      RESTRICT 违反外键约束会产生一个错误。
      CASCADE 级联删除或更新。分别删除一个引用行或者更新一个引用列的值。
      SET NULL 设置引用列(referencing column(s))的值为null
      SET DEFAULT 设置引用列为其缺省值。如果缺省值不是null,那么仍然需要被引用表中有一条记录的被引用字段的值与之匹配，否则操作会失败。
    [ MATCH matchtype ] 当向引用表的引用列(referencing column(s))插入数据时，根据给定的匹配规则matchtype匹配被引用表的被引用列的值。匹配规则如下：
      MATCH FULL 不允许多列外键约束中的任何一个为null,除非他们全部为null，这样不要求被引用表中有与其匹配的数据。
      MATCH PARTIAL 此特性尚未实现
      MATCH SIMPLE 这是默认值。允许外键约束中的任何一列为null,只要外键约束中的一列为null,则不要求与被引用表相匹配。
         外键约束也可以引用自身表中的字段。
35，根据in的顺序查询数据：select * from tbl_vendor where id in(5,2,4,3) order by position(id::text in '5,2,4,3')
36，复制一个数据库：CREATE DATABASE my_new_database TEMPLATE my_old_database;
37，在后台备份一个数据库：nohup export PGPASSWORD="***" && /usr/pgsql-9.6/bin/pg_dump -h XXX -p 5432 -U "username" -Fc -f /mnt/data/database_back/20191011.pgdump -d database_name > /data/logs/database/pgdump_20191011.log 2>&1 & 
    其实上面的命令，没有任何输出，日记文件可以不用写，换成：> /dev/null 2>&1 即可
    -d ： 这个参数需要在高版本中才能有
38，在后台恢复一个数据库：
    首先创建一个shell脚本，shell内容如下：
#!/bin/bash
export PGPASSWORD="***"
/usr/pgsql-9.6/bin/pg_restore -h XXX -p 5432 -U "username" -d database_name /mnt/data/database_back.pgdump 貌似加 -v【verbose mode：详细模式】参数可以查看详细信息
    然后执行如下命令：
nohup /bin/bash /mnt/data/database_back/shell-postgresql_resto.sh > /mnt/data/logs/database/pg_restore_20191011.log 2>&1 &  貌似上面不加 -v 这里的日记也没有啥信息
39，删除一个check约束：ALTER TABLE "tbl_admin" DROP CONSTRAINT "ckc_username_tbl_admi"; 
40，为字段添加注释：comment on column table_name.column_name is 'xxx'; 
41，清空表数据，并还原自增id：TRUNCATE table_name, table_name RESTART IDENTITY;  或     truncate table table_name;alter sequence seq_name start 1; （不同的数据库版本，可能有一定的差异）
42，删除可视化视图：drop MATERIALIZED VIEW "public"."view_task_trace" cascade  相关的视图也会删除，如果有相关的视图需要先备份（特别注意）
  
  
一、日期格式转换
1.字符日期格式转化为UNIX时间戳格式
select * from test where endtime >= extract(epoch FROM date('2012-09-03 00:00:00'));

2.UNIX时间戳转化为字符日期格式
字段endtime为内容为UNIX时间戳格式，例如1346650755
select * from test where date(to_timestamp(endtime))>='2012-09-02';
或查询出字符串如：SELECT to_char(to_timestamp(1234567890), 'YYYY-MM-DD HH24:MI:SS')




下面是字段的取值范围：
smallint[int2]            2 字节      小范围整数                                      -32768 到 +32767
integer[int4/int]         4 字节      常用的整数                                      -2147483648 到 +2147483647
bigint[int8]              8 字节      大范围的整数                                 -9223372036854775808 到 9223372036854775807
decimal                   可变长      用户声明精度，精确                  小数点前 131072 位；小数点后 16383 位 （无限制）。 类型decimal和numeric是等效的
numeric                   可变长      用户声明精度，精确                  小数点前 131072 位；小数点后 16383 位 （无限制）。  建议将它用于货币金额和其它要求精确计算的场合（计算要慢很多）
real[float4]              4 字节      可变精度，不精确                       6位十进制数字精度
double precision[float8]  8 字节      可变精度，不精确                       15位十进制数字精度(浮点型数据)
smallserial               2 字节      自增的小范围整数                        1 到 32767
serial                    4 字节      自增整数                                            1 到 2147483647
bigserial                 8 字节      自增的大范围整数                        1 到 9223372036854775807




下面是数据库的事务隔离级别总结：set traansaction isolation level serializable; // 设置事务隔离级别

事务隔离级别分为：read uncommitted（读取未提交），read committed（读取已提交），repeatable read（可重复读），serializable（可串行化），级别从左到右依次递增 
postgresql默认事务隔离级别是read committed，且postgresql没有read uncommitted隔离级别
mysql默认事务隔离级别是repeatable read

脏读（dirty read）：当一个事务读取另一个事务尚未提交的修改时数据就叫脏读
非重复读（nonrepeatable read）：同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，如果每次返回不同的结果集，就叫非重复读。
幻像（phantom read）：同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，就叫幻像读。

postgresql如果一个事务内，未提交的数据，是可以马上读取出来的。如果不在一个事务内，不管读取的是事务涉及的表还是非事务涉及的表，均会等等事务执行完毕，才可进行读取，且不能读取未提交的数据。
经多次测试mysql也和postgresql一样，会阻塞请求，且没有测出脏读和不可重复读的情况。后经证实和框架有关，我用yii2进行测试的，yii2判断如果有事务在执行时，会阻塞所有的查询、更新、删除操作。


总结表格如下
Isolation level               Dirty read（脏读）                                  Non-repeatable read（不可重复读）                      Phantoms read（幻读）
Read Uncommitted              may occur（可能）                                       may occur                                 may occur
Read Committed                don't occur（不可能）                               may occur                                 may occur
Repeatable Read               don't occur                      don't occur                               may occur
Serializable                  don't occur                      don't occur                               don't occur

   
   
distinct和Group by的区别： 
distinct只是将重复的行从结果中除去；是把不同的记录显示出来（也可以按照多列去重）； 而distinct不能使用聚集函数（count除外）。
group by是按指定的列分组，一般这时在select中会用到聚合函数。 在查询时先把纪录按照类别分出来再查询。（group by 会重新排序）
一样的地方：如果group by不使用聚合函数，就和distinct是一样的结果，但两者的性能有区别，且和数据量的列的唯一性有关系。加索引对两者均有效
使用group by查询时，select中的字段只能是group by后面的字段，去重distinct亦如此

聚合函数 ：
AVG      求平均值
MAX      求最大值
MIN      求最小值
SUM      求总和
COUNT    求总记录数

假定 Table 表有三列， 
id, key， value 
其中 id是主键，不能重复，key和value可能有重复记录 
 
使用distinct去重复： 
select distinct key,value 
from table 
不能显示主键。 
 
使用group by 去重复 
select id,key,value from table A, 
(select key,value, min(id) PID 
from table group by key,value 
) B 
where A.id=b.PID 
可以显示主键

结论：如果数据量大的情况下，列的数据唯一性比较好的话，group by会快点，因为group by查询时会进行排序，
相反，如果唯一性差的话，distinct会快点，
distinct占用内存（空间）大，对于DISTINCT操作，它会读取了所有记录； 
group by 占用空间小，而GROUP BY需要读取的记录数量与分组的组数量一样多，也就是说比实际存在的记录数目要少很多


ERROR: source database "template1" is being accessed by other users解决方法:
select pg_terminate_backend(pid) from pg_stat_activity where DATNAME = 'template1'; // 注意后面的数据库名要设置成你自己的
select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where datname='testdb' and pid<>pg_backend_pid(); // 这个更靠谱


下面演示备份数据库：
/usr/bin/pg_dump -U root -W -F t testdb > /data/databaseBack/testdb_201911101728.tar
-U  :  指定连接到 PostgreSQL 数据库服务器的用户
-W  :  强制 pg_dump 程序在连接到 PostgreSQL 服务器时，提示输入密码
-F  :  指定输出的文件格式： (还可以这样写： -Fc)
       c：自定义文件格式
       d：目录格式
       t：TAR 格式
       p：纯文本
       
备份数据库所有对象，包括角色、表空间、数据库、schemes、表、索引、触发器、函数、常量、视图、权限等
如果只想备份角色：
pg_dumpall --roles-only > /data/xxx/all-roles.sql     // --schema-only 、 --tablespace-only（备份表空间）

(两个不同的数据库，貌似可以通过管道备份：pg_dump -h remotehost -U remoteuser remotedbname | psql -U localuser localdbname)

下面演示恢复数据库：
/usr/bin/psql -h xxx.xxx.xx.x -p 5432 -U username -W --set ON_ERROR_STOR=on [-d databaseName] -f backupFilePath 在发生错误时，停止还原 (如果备份的是全部的数据库，可把-d参数去掉)

/usr/bin/pg_restore -h 127.0.0.1 -p 5432 -U root -W --dbname=test2 --verbose /data/databaseBack/test_20191110183332.tar 还原数据库
/usr/bin/pg_restore -h 127.0.0.1 -p 5432 -U root -W --dbname=test --create --verbose /data/databaseBack/test_20191110183332.tar 如果您还原的数据库与您备份的数据库相同

修改拥有者：
DO $$DECLARE r record;
DECLARE
    v_schema varchar := 'public';
    v_new_owner varchar := 'gyt_cds_admin'; // 在对应的数据库中执行，修改此行
BEGIN
    FOR r IN 
        select 'ALTER TABLE "' || table_schema || '"."' || table_name || '" OWNER TO ' || v_new_owner || ';' as a from information_schema.tables where table_schema = v_schema
        union all
        select 'ALTER TABLE "' || sequence_schema || '"."' || sequence_name || '" OWNER TO ' || v_new_owner || ';' as a from information_schema.sequences where sequence_schema = v_schema
        union all
        select 'ALTER TABLE "' || table_schema || '"."' || table_name || '" OWNER TO ' || v_new_owner || ';' as a from information_schema.views where table_schema = v_schema
        union all
        select 'ALTER FUNCTION "'||nsp.nspname||'"."'||p.proname||'"('||pg_get_function_identity_arguments(p.oid)||') OWNER TO ' || v_new_owner || ';' as a from pg_proc p join pg_namespace nsp ON p.pronamespace = nsp.oid where nsp.nspname = v_schema
        union all
  SELECT 'ALTER TABLE '|| oid::regclass::text ||' OWNER TO '||v_new_owner||';' FROM pg_class WHERE relkind = 'm' 
        union all
        select 'ALTER DATABASE "' || current_database() || '" OWNER TO ' || v_new_owner 
    LOOP
        EXECUTE r.a;
    END LOOP;
END$$;



当恢复数据库时，遇到下面的错误：
pg_restore: [archiver (db)] Error from TOC entry 3010; 0 0 COMMENT EXTENSION plpgsql 
pg_restore: [archiver (db)] could not execute query: ERROR:  must be owner of extension plpgsql
    Command was: COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';
分析：其实这个并不是致命的错误，可以忽略
plpgsql插件在创建数据库的时候默认就是存在的，而且用户可用，不用再次create和comment，后边的数据如果使用plpgsql插件，也是可以的，应该不影响数据的恢复。


获取最新的一条记录，把客户的名称改了
UPDATE tbl_customer SET customer_name=t.enter_name FROM (
  SELECT 
    (ARRAY_AGG(enter_name ORDER BY id DESC))[1] AS enter_name,customer_id 
  FROM tbl_cd 
  WHERE cd_company_id=206 GROUP BY customer_id
) AS t WHERE t.customer_id=tbl_customer.id AND tbl_customer.cd_company_id=206;


联合更新
UPDATE tbl_hw_matnr AS hm
SET first_uom = gh.first_uom, second_uom = gh.second_uom 
FROM
  tbl_goods_hs AS gh 
WHERE
  hm.hs_code = gh.hs_code AND (gh.first_uom <> hm.first_uom OR gh.second_uom <> hm.second_uom)
  
UPDATE tbl_ems_goods AS hm
SET unit_1 = gh.first_uom, unit_2 = gh.second_uom 
FROM
  tbl_goods_hs AS gh 
WHERE
  hm.code_t = gh.hs_code AND (gh.first_uom <> hm.unit_1 OR gh.second_uom <> hm.unit_2)