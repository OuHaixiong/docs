
nodejs需要Python 2.6 or 2.7 
通过python -V可以查看Python的版本

下面是通过源码安装nodeJs 0.12.3
1，下载源码包：https://nodejs.org/download/   node-v0.12.3.tar.gz
2，解压文件：tar -zxvf node-v0.12.3.tar.gz
3，创建编译文件：
   cd node-v0.12.3
   ./configure
4，编译并安装：make && make install
5，测试：node --version
6，后台运行：nohup node  /data/www/push/app.js >/data/logs/push.log 2>&1 &

下面源码安装node.js v4.5.0
1，下载源码node-v4.5.0



下面通过nodejs的linux二进制包进行安装
1，下载linux二进制包：node-v4.5.0-linux-x64.tar.xz（Linux Binarie）
2，解压文件
# tar -xvf node-v4.5.0-linux-x64.tar.xz
# cd node-v4.5.0-linux-x64
# cd bin
3，运行如下命令
# ./node -v
# ./npm -v
如果显示出版本号说明我们下载的程序包是没有问题
4，拷贝目录到/usr/local/node中
mv /data/tool/node-v4.5.0-linux-x64 /usr/local/node
5，作软连接，让全局都能使用nodejs
ln -s /usr/local/node/bin/node /usr/local/bin/node
ln -s /usr/local/node/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm
至此，node部署完毕，现在可以在任意目录下运行node和npm了。

下面全局安装webpack包
1，用npm安装全局webpack：npm install -g webpack
2，做软链接，让所有的地方都能用webpack命令：ln -s /usr/local/node/bin/webpack /usr/local/bin/webpack
3，常用的webpack命令如下：
$ webpack --config webpack.min.js //另一份配置文件
$ webpack --display-error-details //显示异常信息
$ webpack --watch   //监听变动并自动打包
$ webpack -p    //压缩混淆脚本，这个非常非常重要！
$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了


npm -g install npm@2.9.1  更新npm版本；版本号2.9.1 可以根据已发布的版本随意升级或降级

node 环境变量的设置
shell[linux]
NODE_ENV=development node app.js  NODE_ENV=PRODUCTION node server.js
最好不要用环境变量这个东西，很坑爹的货，不可见的，且对当前窗口才有用
DISPLAY=:1.0 NODE_ENV=production pm2 start server.js -x -i max --name server
通过PM2 启动一个进程，
-x：用fork模式启动 server.js，而不是使用cluster
-i max：根据有效cpu数目启动最大进程数目。-i 3:启动3个进程
--name：启动一个进程并把它命名为xxx
(如果需要启动X server：pm2 start /usr/lib/xorg/Xorg)

cmd[windows]
set NODE_ENV=development
node app.js

pm2更多操作
安装
npm install -g pm2

用法
$ npm install pm2 -g # 命令行安装 pm2
$ pm2 start app.js -i 4 #后台运行pm2，启动4个app.js
                                # 也可以把'max' 参数传递给 start
                                # 正确的进程数目依赖于Cpu的核心数目
$ pm2 start app.js --name my-api # 命名进程
$ pm2 list # 显示所有进程状态
$ pm2 monit # 监视所有进程【监视每个node进程的CPU和内存的使用情况】
$ pm2 logs # 显示所有进程日志
$ pm2 stop all # 停止所有进程
$ pm2 restart all # 重启所有进程
$ pm2 reload all # 0秒停机重载进程 (用于 NETWORKED 进程)
$ pm2 stop 0 # 停止指定的进程
$ pm2 restart 0 # 重启指定的进程
$ pm2 startup # 产生 init 脚本 保持进程活着
$ pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)
$ pm2 delete 0 # 杀死指定的进程
$ pm2 delete all # 杀死全部进程

运行进程的不同方式：
$ pm2 start app.js -i max # 根据有效CPU数目启动最大进程数目
$ pm2 start app.js -i 3 # 启动3个进程
$ pm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster
$ pm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)
$ pm2 start app.js --name serverone # 启动一个进程并把它命名为 serverone
$ pm2 stop serverone # 停止 serverone 进程
$ pm2 start app.json # 启动进程, 在 app.json里设置选项
$ pm2 start app.js -i max -- -a 23 #在--之后给 app.js 传递参数
$ pm2 start app.js -i max -e err.log -o out.log # 启动 并 生成一个配置文件
你也可以执行用其他语言编写的app ( fork 模式):
$ pm2 start my-bash-script.sh -x --interpreter bash
$ pm2 start my-python-script.py -x --interpreter python

0秒停机重载:
这项功能允许你重新载入代码而不用失去请求连接。
注意：
仅能用于web应用
运行于Node 0.11.x版本
运行于 cluster 模式（默认模式）
$ pm2 reload all

CoffeeScript:
$ pm2 start my_app.coffee #这就是全部