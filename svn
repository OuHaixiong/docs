
CentOS 6.5 安装svn：
yum install subversion

svn info 可以查看svn的一些信息：如，当前分支号

svn 不支持批量删除和批量添加功能，我们可以通过如下方式实现：
批量删除文件
svn status |grep ! |awk '{print $2}' |xargs svn del
首先svn status查看svn状态，列出所有改动，打!号的是已经删除的文件但是还未标记成从库中除去，grep !将这些文件单独抽离出来，
再用awk '{print $2}'将抽离出来的文本结果处理，留下每一行的第二段文字，即后面的文件名，这个时候就可以直接递交给svn del命令了，
使用xargs这个参数构造命令，将每一行的文本作为参数提供给svn del，结果就是所有列出的文件都执行了一遍del了。
批量添加文件（几乎一样，不同的是svn标记的符号不一养，使用的是问号）
svn status |grep ? |awk '{print $2}' |xargs svn add
特别注意的是：不管是批量删除还是批量添加都需要commit才能使版本库的文件删除或添加：svn commit -m "删除提交测试"

svn update -r m path 
例如： 
svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。 
svn update -r 200 test.php(将版本库中的文件test.php还原到版本200) 
svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit) 
简写：svn up


名词说明：
WC：Working Copy 你的工作区
Versioned：受控的；受版本控制的
 
 svn resolve --accept working test.txt  标记已经解决冲突

SVN是什么？

    SVN是开源的版本控制系统。
    比CVS更多的特性。一个更好的CVS？因此SVN具有大部分CVS拥有的特性。
    不仅仅是文件受控，目录也加入版本控制。
    复制，删除，重命名这些操作都是受控的。
    特殊作用的元数据（属性）。
    提交事务原子性。提交完成之前任何一个部分都不会正真生效。版本号基于提交，而不是基于文件。提交时的log message也是依附于提交的那个版本。
    创建分支和标记非常简单。简单的通过copy命令就可以创建分支和标记。
    合并跟踪。在合并时协助你处理所有的更改点。
    文件锁定。svn支持文件锁定修改策略。
    Unix的link可以受控了。前提是WC必须在Unix下。
    可选的Apache network server，基于WEBDAV/DeltaV 协议。熟悉Apache的管理员会很喜欢这一点。
    内置的server选择（svnserve）。如果不想用Apache，可以试试Svn自己的server：svnserve。同样也能提供授权和验证，ssh通道等功能。
    方便解析的输出。svn的输出尽量做到方便阅读和方便机器解析。
    冲突解决交互性良好。svn命令行客户端提供多种不同的方式解决冲突。
    svn提供一个实用工具，svnsync来实现从主库到只读附属库的同步。
    持续写入代理功能让只读的附属库专门处理所有的读请求。所有的写请求交给主库处理。这个功能只在使用Apache WebDAV server的时候才有效。
    基于本地化的客户机服务器体系，分层的库，明晰的API方便扩展。
    高效处理二进制文件。
    性能消耗与更改点的数量成正比。
    svn的api可以和多种语言集成。Python，Perl,Java,Ruby（svn本身是用C写的）
    ChangeLists功能。

Svn的安装分客户端和服务端。
你可以在如下地址找到下载：http://subversion.tigris.org/
这篇文章主要介绍的是svn客户端的命令，你至少需要安装客户端。默认就是以SVN做版本控制的。如果你不想在自己机器上安装服务版，google code是个练习svn命令的好地方。
http://code.google.com上申请托管项目很简单，但是现在不支持svn lock。目前最大支持1G空间。


以下是svn客户端常用命令一览：

svn 命令共同的选项
    --targets list 读取list并将其解释为一个将要操作的参数列表
    --non-recurisive, –N 只操作单个目录，不处理子目录
    --verbose, –v 打印额外的信息
    --quiet, –q 打印的信息尽可能少
    --username,  name 指定在连接授权时使用的用户名
    --password, pawd 指定要使用的密码
    --no-auth-cache 不要缓存身份令牌
    --non-interactive 不要提示输入额外的信息
    --config-dir  dir  从dir读取用户配置
    --editor-cm cmd 使用cmd作为日志消息的编辑器

svn add [path]
别名：无
描述：添加文件或目录到你的wc，打上新增标记。这些文件会在下一次你提交wc的时候提交到svn服务器。
在提交前，你也可以用svn revert撤销新增的文件。
访问库：否
--auto-props 在添加他们的时候自动设置文件的属性
--no-auto-props 禁用自动属性设置
eg: svn add file.cpp

svn blame Target[@REV]
别名：praise,annotate,ann
描述：显示某个已受控文件的每一行的最后修改版本和作者
访问库：是
eg: svn blame file.cpp
eg: svn blame --xml file.cpp  ##加上xml参数可以以xml格式显示每一行的属性。
--revision, –r rev 如果指定的rev是单个版本，显示该版本作者信息。如果是范围rev1:rev2, 显示rev2版本作者的信息，但只检查版本到rev1.

svn cat TARGET[@REV]

别名：无

描述：输出指定目标的内容，这里的目标一般是文件。

访问库：是

eg:svn cat file.cpp

eg:svn cat file.cpp -r 2 ##显示版本号为二的file.cpp内容。

eg:svn cat file.cpp --revision HEAD ##显示最新版本的file.cpp内容。

 

svn changelist CLNAME TARGET...

svn changelist --remove TARGET

别名：cl

描述：可以将wc中的文件从逻辑上分组.

访问库：否

eg:svn cl clName file.cpp file2.cpp file3.cpp  ##将file.cpp等三个文件加入名叫clName的changelist 

eg:svn commit --changelist clName -m "ci"  ##将clName下的所有文件提交

 

svn checkout URL[@REV]... [PATH]
别名：co
描述：检出
访问库：否
eg:svn checkout file:///var/svn/repos/test  file:///var/svn/repos/quiz working-copies
eg:svn checkout -r 2 file:///var/svn/repos/test mine  ##check out 版本号为2的项目

 

svn cleanup [PATH...]
别名：无
描述：递归的清理WC中过期的锁和未完成的操作。
访问库：否
eg：svn cleanup

svn commit [PATH...]
别名：ci
描述：把你WC的更改提交到仓库
访问库：是
eg：svn commit -m "added howto section." ##默认情况下提交必须提供log message 

svn copy SRC[@REV]... DST
别名：cp
描述:copy操作可以从WC到WC；WC到URL；URL到WC；URL到URL。现在SVN只支持同一个仓库内文件的拷贝，不允许跨仓库操作。
访问库：是
eg：svn copy -r 11 file:///var/svn/repos/test/trunk  file:///var/svn/repos/test/tags/0.6.32-prerelease -m "Forgot to tag at rev 11"
##copy命令是创建分支和标记的常用方式。copy到url的操作隐含了提交动作，所以需要提供log messages。

svn delete PATH...
别名：del，remove，rm
描述：删除
访问库：如果PATH是库地址时，不会删除WC内的文件。
eg：svn del localfile.cpp    ##删除WC里的文件，在下一次提交WC的时候才会真正在仓库里将对应文件删除。
eg: svn del file:///var/svn/repos/test/yourfile  ##删除仓库里的文件

svn diff
别名：di
描述：用来比较并显示修改点。
访问库：
eg：svn diff   ##最常用的方式，用来显示WC基于最近一次更新以后的所有的本地修改点。
eg：svn diff -r 301 bin ## 比较WC和版本301中的bin目录的修改点
eg：svn diff -r 3000:3500 file:///var/svn/repos/myProject/trunk   ##比较库里主干3000版和3500版的差异。
eg：svn diff --summarize --xml http://svn.red-bean.com/repos/test@r2 http://svn.red-bean.com/repos/test  ##--summarize --xml 参数将差异情况以xml文档的方式显示出来。（svn diff oldurl newurl）

 

svn export [-r REV] URL[@PEGREV] [PATH]

svn export [-r REV] PATH1[@PEGREV] [PATH2]

别名：无

描述：导出一个干净的目录树，不包含所有的受控信息。可以选择从URL或WC中导出。

访问库：如果访问的是URL则会。

eg：svn export file:///var/svn/repos my-export   ##导出到my-export目录。

 

svn help — Help!

别名：?,h

描述：不用解释了

访问库：否。

 

svn import [PATH] URL

别名：无

描述：导入本地一个目录到库中。但是导入后，本地的目录并不会处于受控状态。

访问库：是。

eg：svn import -m "New import" myproj http://svn.myProject.com/repos/trunk/misc

 

svn info [TARGET[@REV]...]

别名：无

描述：显示指定WC和URL信息。

访问库：仅当访问的是库路径时。

eg：svn info --xml http://svn.myProject.com/repos/test  ##将信息以xml格式显示。

 

svn list [TARGET[@REV]...]

别名：ls

描述：显示目标下的文件和目录列表。

访问库：如果访问的是库地址就会。

eg：svn list --verbose file:///var/svn/repos   ##--verbose参数表示显示详细信息。

 

svn lock TARGET...

别名：无

描述：对目标获得修改锁。如果目标已被其他用户锁定，则会抛出警告信息。用--force参数强制从其他用户那里获得锁。

访问库：是

eg：svn lock --force tree.jpg

 

svn log [PATH]
svn log URL[@REV] [PATH...]
别名：无
描述：从库中显示log消息(显示提交日志信息)。log消息代码 A ：added  D：deleted  M：modified  R：replaced
访问库：是
eg：svn log -v http://svn.myProject.com/repos/test/ foo.c bar.c   ##详细显示指定URL的库中foo.c和bar.c所有版本的log信息。
eg：svn log -r 14:15    ##显示当前WC的14和15版本log信息。
eg：##如果版本号不连续，只能采用如下方式。
$ svn log -r 14 > mylog
$ svn log -r 19 >> mylog
$ svn log -r 27 >> mylog

 

svn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]

svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]

svn merge [[-c M]... | [-r N:M]...] [SOURCE[@REV] [WCPATH]]

别名：无

描述：合并两个受控源的不同之处，存放到一个WC里。

访问库：只有当访问库地址时。

eg：svn merge --reintegrate http://svn.example.com/repos/calc/branches/my-calc-branch  ##合并分支上的改变项到WC，往往用于分支合并到主干。

eg：svn merge -r 156:157 http://svn.example.com/repos/calc/branches/my-calc-branch   ##将制定URL版本156到157的所有更新合并到WC。

 

svn mkdir PATH...

svn mkdir URL...

别名：无

描述：在WC或库路径创建目录

访问库：只有当访问库地址时。

eg：svn mkdir newdir

 

svn move SRC... DST

别名：mv, rename, ren

描述：等同于svn copy命令跟个svn delete命令。WC到URL的重命名是不被允许的。

访问库：只有当访问库地址时。

eg：svn move foo.c bar.c  ##将foo.c改名成bar.c。

 

svn propdel PROPNAME [PATH...]

svn propdel PROPNAME --revprop -r REV [TARGET]

别名：pdel, pd

描述：从受控文件，目录等删除属性。第二种是删除某个指定版本上的附加属性。

访问库：只有当访问库地址时。

eg：svn propdel svn:mime-type someFile    ##从someFile上移除svn:mime-type这个属性。

 

svn propedit PROPNAME TARGET...

svn propedit PROPNAME --revprop -r REV [TARGET]

别名：pedit, pe

描述：编辑属性

访问库：只有当访问库地址时。

eg：svn propedit svn:keywords  file.c  ##修改file.c上的svn:keywords属性。

 

svn propget PROPNAME [TARGET[@REV]...]

svn propget PROPNAME --revprop -r REV [URL]

别名：pget,pg

描述：从文件，目录或版本取得指定属性的值。

访问库：只有当访问库地址时。

eg：svn propget svn:keywords file.c   ##从file.c中取得svn:keywords属性的值

 

svn proplist [TARGET[@REV]...]

svn proplist --revprop -r REV [TARGET]

别名：plist, pl

描述：列出文件、目录或版本上的所有附加属性

访问库：只有当访问库地址时。

eg：svn proplist --verbose file.c

 

svn propset PROPNAME [PROPVAL | -F VALFILE] PATH...

svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET]

别名：pset,ps

描述：给文件、目录或版本附加属性并赋值

访问库：只有当访问库地址时。

eg：svn propset svn:mime-type image/jpeg file.jpg   ##给file.jpg附加属性svn:mime-type 其值为image/jpeg

eg:svn propset --revprop -r 25 svn:log "Journaled about trip to New York."

##给版本25补上log message

eg:svn propset svn:ignore '.classpath' . 

##在本地忽略掉.classpath文件

 

svn resolve PATH...

别名：无

描述：将冲突的文件标记为已解决，并且删掉冲突产生的临时文件。注意这个命令并不是能把冲突解决，解决冲突还是得靠人工。

访问库：否

eg：svn resolve --accept mine-full foo.c   ##1.5版本后，加上--accept参数，尝试自动处理冲突。

 

svn resolved PATH...

别名：无

描述：已过时，被resolve --accept取代。去除冲突的状态和冲突临时文件。

访问库：否

 

svn revert PATH...

别名：无

描述：还原WC中所有的本地更改。

访问库：否

eg：svn revert --depth=infinity .   ##将整个目录所有文件还原

 

svn status [PATH...]
别名：stat, st
描述：输出WC中文件和目录的状态。如果WC提交，这些状态就会同步到库里。
一般状态有         ' '  没有修改
'A'  新增
'D'  删除
'M'  修改
'R'  替代
'C'  冲突
'I'  忽略
'?'  未受控
'!'  丢失，一般是将受控文件直接删除导致
访问库：加上--show-updates参数时会
eg：svn status wc

svn switch URL[@PEGREV] [PATH]
svn switch --relocate FROM TO [PATH...]
别名：sw
描述：将WC转向一个其他的库地址同步
访问库：是
eg：svn sw http://svn.myProject.com/repos/trunk/vendors .  ##将当前WC切换到另一个URL

svn unlock TARGET...
别名：无
描述：解锁
访问库：是
eg：svn unlock somefile

svn update [PATH...]
别名：up
描述：更新WC，更新反馈有如下几种分类。
A  新增
B  锁破坏
D  删除
U  更新
C  冲突
G  合并
E  存在的
访问库：是
eg：svn up -r22   ##更新到一个指定版本 （ --revision, –r rev 更新到版本rev ）
--non-recrusive, –N
--diff3-cmd

 

ps:如何去除SVN中保存的用户授权密码

在Subversion安装目录下找到auth/svn.simple目录，将下面的文件删除即可。

如果在乌龟中，可以setting->saved data->Authentication Data   点 clear 即可。 





sudo apt-get install subversion   (centos安装svn客户端：yum install -y subversion)

.添加svn管理用户及subversion组
$ sudo adduser svnuser
$ sudo addgroup subversion
$ sudo addgroup svnuser subversion

 
sudo mkdir -p /opt/svn/trunk
cd /opt/svn
sudo chown -R root:subversion trunk
sudo chmod -R g+rws trunk

创建SVN文件仓库
sudo svnadmin create /opt/svn/trunk/study

如果你有文件需要初始化导入：
sudo svn import -m "这里是注释" /var/www/study  file:///opt/svn/trunk/study  (最前面是固定的)

下面设置用户的访问权限
cd /opt/svn/trunk/study/conf

sudo vim svnserve.conf 
取消注释如下几行（注意前面不能有空格）
#anon-access = read     （匿名用户只有读的权限,如果匿名用户不能访问，就设置为none） 
auth-access = write     （有权限的用户有写的权限）
password-db = passwd    （密码用本目录下的passwd文件内的用户和密码）
authz-db = authz        （在本目录下的authz文件内的设置用户和群组）

sudo vim passwd 
[users]
Bear=123456              (设置用户名和密码)

sudo vim authz
[groups]
admin=Bear               （设置群组，如果有多个人就用,隔开，如： Bear,test1）
[/]
@admin=rw                 （admin组有读和写的权限）
*=r                       （其他组只有读的权限）

启动svn服务
sudo svnserve -d -r /opt/svn/trunk
-d ： 表示svnserver以“守护”进程模式运行
-r ： 指定文件系统的根位置（版本库的根目录），这样客户端不用输入全路径，就可以访问版本库，如：svn://192.168.1.19/study
可通过命令查看是否有启动：
ps aux |grep svn

至此，svn安装完成，可以通过局域网访问：
svn checkout svn://192.168.1.19/study --username Bear --password 123456 /data/www/study （checkout也可以简写：co）


具体的svn操作，请查看《svn命令》一文


下面所通过apache（http）方式访问svn
二、HTTP:// [apache]
1.安装包 [已安装subversion]
$ sudo apt-get install libapache2-svn

创建版本仓库：
sudo svnadmin create /目录地址
目录地址必须存在，这个就是保存版本仓库的地方，不同的版本仓库创建不同的文件夹即可，比如：
sudo svnadmin create /home/svn/project
本来/home/svn/project这个目录下什么都没有，执行下面的命令之后再去看一下，多出一些文件和文件夹，我们需要操作的是conf这个文件夹，这个文件夹下有一个文件，叫做passwd，用来存放用户名和密码。
然后把这个版本仓库目录授权给apache读写：
sudo chown -R www-data:www-data /目录地址
然后来到打开apache配置文件：
sudo gedit /etc/apache2/mods-available/dav_svn.conf

加入如下内容：
<Location /project>
DAV svn
SVNPath /home/svn/project
AuthType Basic
AuthName “myproject subversion repository”
AuthUserFile /home/svn/project/conf/passwd
#<LimitExcept GET PROPFIND OPTIONS REPORT>
Require valid-user
#</LimitExcept>
</Location>

location说的是访问地址，比如上述地址，访问的时候就是
http://127.0.0.1/project
其中有两行被注释掉了，以保证每次都需要用户名密码。
最后一步就是创建访问用户了，建议将用户名密码文件存放在当前版本仓库下conf文件夹下，这样版本仓库多的时候无至于太乱。
因为conf文件夹下已经存在passwd文件了，所以直接添加用户：
sudo htpasswd -c /home/svn/project/conf/passwd test
然后输入两遍密码，laoyang这个用户就创建好了。
打开/home/svn/project/conf/passwd这个文件，会开到形如如下形式的文本：
test:WEd.83H.gealA //后面是加密后的密码。
创建以后，再次需要往别的版本仓库添加这个用户，直接把这一行复制过去就可以了。
重启apache就可以了。
sudo /etc/init.d/apache2 restart


下面是利用钩子，同步更新文件到web服务器上：
同步程序思路：用户提交程序到SVN，SVN触发hooks,按不同的hooks进行处理，这里用到的是post-commit，利用post-commit到代码检出到SVN服务器的本地硬盘目录，再通过rsync同步到远程的WEB服务器上。

知识点：
1、SVN的hooks
# start-commit 提交前触发事务
# pre-commit 提交完成前触发事务
# post-commit 提交完成时触发事务
# pre-revprop-change 版本属性修改前触发事务
# post-revprop-change 版本属性修改后触发事务
通过上面这些名称编写的脚本就就可以实现多种功能了，相当强大。
2、同步命令rsync的具体参数使用
3、具有基个语言的编程能力bash python perl都可以实现

post-commit具体实现细节
post-commit脚本

编辑文件：sudo vim /home/svn/fitness/hooks/post-commit

注意：编辑完成post-commit后，执行：sudo chmod 755 post-commit

内容：

#!/bin/sh
export LANG=zh_CN.UTF-8
sudo /usr/bin/svn update /var/www/www --username mirze --password 123456

或
#Set variable
SVN=/usr/bin/svn
WEB=/home/test_nokia/
RSYNC=/usr/bin/rsync
LOG=/tmp/rsync_test_nokia.log
WEBIP="192.168.0.23"
export LANG=en_US.UTF-8

#update the code from the SVN
$SVN update $WEB --username user --password password
#If the previous command completed successfully, to continue the following
if [ $? == 0 ]
then
echo "" >> $LOG
echo `date` >> $LOG
echo "##############################" >> $LOG
chown -R nobody:nobody /home/test_nokia/
#Synchronization code from the SVN server to the WEB server, notes:by the key
$RSYNC -vaztpH --timeout=90 --exclude-from=/home/svn/exclude.list $WEB root@$WEBIP:/www/ >> $LOG
fi

以上是具体的post-commit程序
注意事项：
1、一定要定义变量，主要是用过的命令的路径。因为SVN的考虑的安全问题，没有调用系统变量，如果手动执行是没有问题，但SVN自动执行就会无法执行了。
2、SVN update 之前一定要先手动checkout一份出来，还有这里一定要添加用户和密码如果只是手动一样会更新，但自动一样的不行。
3、加上了对前一个命令的判断，如果update的时候出了问题，程序没有退出的话还会继续同步代码到WEB服务器上，这样会造成代码有问题
4、记得要设置所属用户，因为rsync可以同步文件属性，而且我们的WEB服务器一般都不是root用户，用户不正确会造成WEB程序无法正常工作。
5、建议最好记录日志，出错的时候可以很快的排错
6、最后最关键的数据同步，rsync的相关参数一定要清楚，这个就不说了。注意几个场景：
这里的环境是SVN服务器与WEB服务器是开的
把SVN服务器定义为源服务器 WEB服务器为目的服务器
场景一、如果目的WEB服务器为综合的混杂的，像只有一个WEB静态资源，用户提交的，自动生成的都在WEB的一个目录下，建议不要用–delete这个参数
上面这个程序就是这样，实现的是源服务器到目的服务器的更新和添加，而没有删除操作，WEB服务器的内容会多于源SVN的服务器的
场景二、实现镜像，即目的WEB服务器与源SVN服务器一样的数据，SVN上任何变化WEB上一样的变化，就需要–delete参数
场景三、不需要同步某些子目录，可能有些目录是缓存的临时垃圾目录，或者是专用的图片目录（而不是样式或者排版的）要用exclude这个参数
注意：这个参数的使用不用写绝对路径，只要目录名称就行 aa代表文件 aa/ 代表目录 ，缺点就是如果有多个子目录都是一样的名称那么这些名称就都不会被同步
建议用–exclude-from=/home/svn/exclude.list 用文件的形式可以方便的添加和删除
exclude.list

.svn/
.DS_Store
images/

利用SVN的钩子还可以写出很多的程序来控制SVN 如代码提交前查看是否有写日志，是否有tab，有将换成空格，是否有不允许上传的文件，是否有超过限制大小的文件等等。


下面制作开机启动脚本：
进入/etc/init.d/目录

cd /etc/init.d/

创建/编辑svnd脚本文件

sudo gedit svnd

#!/bin/bash
# chkconfig: 34 30 70
# description: svnserve startup

if [ ! -f "/usr/bin/svnserve" ]
then
echo “svnserve startup: cannot start: file /usr/bin/svnserve doesn’t exists or cannot access.”
exit
fi
case “$1″ in
start)
echo “Starting svnserve…”
/usr/bin/svnserve -d –root /path/to/svnrepos 【2012.3.17补充下划线部分】
echo “started.”
;;
stop)
echo “Stoping svnserve…”
killall svnserve
echo “stopped”
;;
restart)
$0 stop
$0 start

;;
*)
echo “Usage: sudo service svnd {start|stop|restart}”
exit 1
esac

执行下面命令，svnserve即可开机自启动

sudo chmod a+x /etc/init.d/svnd
// chmod +x /etc/init.ds/vnd 为脚本赋予执行权限

sudo chkconfig –add svnd