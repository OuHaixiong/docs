
http://64.233.168.41
http://62.1.38.89
http://193.192.250.172
http://212.188.10.241




把Yii的错误日志写入数据库中，以方便在线即时查看错误问题及管理删除日志记录。

把日志写入数据库中的功能Yii本身已经为我们配置开发好了，我们要做的只是修改配置文件让它工作而已。

'components' => array(
'db' => array(
                        'class' => 'CDbConnection',
                        'connectionString' => 'mysql:host=localhost;dbname=csc_cms',
                        'username' => 'root',
                        'password' => '123456',
                        'tablePrefix' => 'csc_',
                ),
   
'log' => array(
        'class'  => 'CLogRouter',
        'routes' => array(
            array(
                'class'        => 'CDbLogRoute',
                'levels'       => 'error,warning,info,notie',
                'connectionID' => 'db',
                'logTableName' => 'error_log',
            )
        ),
),
)

类名：CDbLogRoute 
数据库句柄：db 
数据库表名：logTableName 
捕获日志类别：levels 


完成以上的配置吧，Yii会自动在数据库中创建一个日志表。 
到此大功告成！



核心应用组件：
Yii 预定义了一系列核心应用组件，提供常见 Web 应用中所用的功能。例如， request  组件用于解析用户请求并提供例如 URL，cookie 等信息。通过配置这些核心组件的属性，我们可以几乎任意的修改Yii 的默认行为。

下面我们列出了由 CWebApplication 预定义的核心组件。
assetManager: CAssetManager - 管理私有资源文件的发布。
authManager: CAuthManager - 管理基于角色的访问控制 (RBAC).
cache: CCache - 提供数据缓存功能。注意，你必须指定实际的类（例如CMemCache, CDbCache）。否则，当你访问此组件时将返回 NULL。
clientScript: CClientScript - 管理客户端脚本 (javascripts 和 CSS).
coreMessages: CPhpMessageSource - 提供 Yii 框架用到的核心信息的翻译。
db: CDbConnection - 提供数据库连接。注意，使用此组件你必须配置其 connectionString 属性。
errorHandler: CErrorHandler - 处理未捕获的 PHP 错误和异常。
format: CFormatter - 格式化数值显示。此功能从版本 1.1.0 起开始提供。
messages: CPhpMessageSource - 提供Yii应用中使用的信息翻译。
request: CHttpRequest - 提供关于用户请求的信息。
securityManager: CSecurityManager - 提供安全相关的服务，例如散列，加密。
session: CHttpSession - 提供session相关的功能。
statePersister: CStatePersister - 提供全局状态持久方法。
urlManager: CUrlManager - 提供 URL 解析和创建相关功能
user: CWebUser - 提供当前用户的识别信息。
themeManager: CThemeManager - 管理主题。

要访问一个应用组件，使用 Yii::app()->组件的ID